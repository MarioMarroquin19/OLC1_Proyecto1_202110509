
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizador;

import java_cup.runtime.*;
import java.util.LinkedList;
import java.util.Collections;
import funciones.ImpresionConsola;
import funciones.Variables;
import funciones.OperacionesAritmeticas;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\054\000\002\002\004\000\002\002\006\000\002\003" +
    "\003\000\002\003\004\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\005\015\000" +
    "\002\006\005\000\002\006\003\000\002\007\003\000\002" +
    "\011\010\000\002\011\010\000\002\011\010\000\002\011" +
    "\010\000\002\011\010\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\010\000" +
    "\002\011\010\000\002\011\010\000\002\011\010\000\002" +
    "\011\010\000\002\011\010\000\002\011\006\000\002\011" +
    "\006\000\002\011\006\000\002\011\006\000\002\011\006" +
    "\000\002\011\006\000\002\012\005\000\002\012\003\000" +
    "\002\014\017\000\002\016\005\000\002\016\003\000\002" +
    "\017\012\000\002\020\003\000\002\020\005\000\002\021" +
    "\003\000\002\021\003\000\002\021\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\216\000\004\004\005\001\002\000\004\002\220\001" +
    "\002\000\010\010\012\011\006\025\014\001\002\000\004" +
    "\044\201\001\002\000\012\005\ufffb\010\ufffb\011\ufffb\025" +
    "\ufffb\001\002\000\012\005\ufffc\010\ufffc\011\ufffc\025\ufffc" +
    "\001\002\000\012\005\177\010\012\011\006\025\014\001" +
    "\002\000\004\044\157\001\002\000\012\005\uffff\010\uffff" +
    "\011\uffff\025\uffff\001\002\000\004\044\017\001\002\000" +
    "\012\005\ufffd\010\ufffd\011\ufffd\025\ufffd\001\002\000\012" +
    "\005\ufffa\010\ufffa\011\ufffa\025\ufffa\001\002\000\004\044" +
    "\020\001\002\000\004\042\021\001\002\000\004\064\022" +
    "\001\002\000\042\012\030\013\025\014\043\015\034\016" +
    "\023\017\042\020\036\021\044\022\037\023\041\024\035" +
    "\065\040\066\027\067\026\070\032\071\033\001\002\000" +
    "\004\062\152\001\002\000\004\005\150\001\002\000\004" +
    "\062\143\001\002\000\012\005\uffed\046\uffed\054\uffed\063" +
    "\uffed\001\002\000\012\005\uffef\046\uffef\054\uffef\063\uffef" +
    "\001\002\000\004\062\136\001\002\000\006\005\uffd7\046" +
    "\134\001\002\000\012\005\uffee\046\uffee\054\uffee\063\uffee" +
    "\001\002\000\004\005\uffd8\001\002\000\004\062\127\001" +
    "\002\000\004\062\120\001\002\000\004\062\111\001\002" +
    "\000\004\062\102\001\002\000\012\005\ufff0\046\ufff0\054" +
    "\ufff0\063\ufff0\001\002\000\004\062\073\001\002\000\004" +
    "\062\064\001\002\000\004\062\057\001\002\000\004\062" +
    "\045\001\002\000\006\053\047\071\046\001\002\000\004" +
    "\063\056\001\002\000\040\012\030\013\025\014\043\015" +
    "\034\016\023\017\042\020\036\021\044\022\037\023\041" +
    "\024\035\065\040\066\027\067\026\070\032\001\002\000" +
    "\004\054\054\001\002\000\006\046\052\054\uffdf\001\002" +
    "\000\040\012\030\013\025\014\043\015\034\016\023\017" +
    "\042\020\036\021\044\022\037\023\041\024\035\065\040" +
    "\066\027\067\026\070\032\001\002\000\004\054\uffe0\001" +
    "\002\000\004\063\055\001\002\000\012\005\uffea\046\uffea" +
    "\054\uffea\063\uffea\001\002\000\012\005\uffe4\046\uffe4\054" +
    "\uffe4\063\uffe4\001\002\000\040\012\030\013\025\014\043" +
    "\015\034\016\023\017\042\020\036\021\044\022\037\023" +
    "\041\024\035\065\040\066\027\067\026\070\032\001\002" +
    "\000\004\046\061\001\002\000\040\012\030\013\025\014" +
    "\043\015\034\016\023\017\042\020\036\021\044\022\037" +
    "\023\041\024\035\065\040\066\027\067\026\070\032\001" +
    "\002\000\004\063\063\001\002\000\012\005\ufff3\046\ufff3" +
    "\054\ufff3\063\ufff3\001\002\000\006\053\066\071\065\001" +
    "\002\000\004\063\072\001\002\000\040\012\030\013\025" +
    "\014\043\015\034\016\023\017\042\020\036\021\044\022" +
    "\037\023\041\024\035\065\040\066\027\067\026\070\032" +
    "\001\002\000\004\054\070\001\002\000\004\063\071\001" +
    "\002\000\012\005\uffec\046\uffec\054\uffec\063\uffec\001\002" +
    "\000\012\005\uffe6\046\uffe6\054\uffe6\063\uffe6\001\002\000" +
    "\006\053\075\071\074\001\002\000\004\063\101\001\002" +
    "\000\040\012\030\013\025\014\043\015\034\016\023\017" +
    "\042\020\036\021\044\022\037\023\041\024\035\065\040" +
    "\066\027\067\026\070\032\001\002\000\004\054\077\001" +
    "\002\000\004\063\100\001\002\000\012\005\uffe8\046\uffe8" +
    "\054\uffe8\063\uffe8\001\002\000\012\005\uffe2\046\uffe2\054" +
    "\uffe2\063\uffe2\001\002\000\006\053\104\071\103\001\002" +
    "\000\004\063\110\001\002\000\040\012\030\013\025\014" +
    "\043\015\034\016\023\017\042\020\036\021\044\022\037" +
    "\023\041\024\035\065\040\066\027\067\026\070\032\001" +
    "\002\000\004\054\106\001\002\000\004\063\107\001\002" +
    "\000\012\005\uffe9\046\uffe9\054\uffe9\063\uffe9\001\002\000" +
    "\012\005\uffe3\046\uffe3\054\uffe3\063\uffe3\001\002\000\006" +
    "\053\113\071\112\001\002\000\004\063\117\001\002\000" +
    "\040\012\030\013\025\014\043\015\034\016\023\017\042" +
    "\020\036\021\044\022\037\023\041\024\035\065\040\066" +
    "\027\067\026\070\032\001\002\000\004\054\115\001\002" +
    "\000\004\063\116\001\002\000\012\005\uffeb\046\uffeb\054" +
    "\uffeb\063\uffeb\001\002\000\012\005\uffe5\046\uffe5\054\uffe5" +
    "\063\uffe5\001\002\000\006\053\122\071\121\001\002\000" +
    "\004\063\126\001\002\000\040\012\030\013\025\014\043" +
    "\015\034\016\023\017\042\020\036\021\044\022\037\023" +
    "\041\024\035\065\040\066\027\067\026\070\032\001\002" +
    "\000\004\054\124\001\002\000\004\063\125\001\002\000" +
    "\012\005\uffe7\046\uffe7\054\uffe7\063\uffe7\001\002\000\012" +
    "\005\uffe1\046\uffe1\054\uffe1\063\uffe1\001\002\000\040\012" +
    "\030\013\025\014\043\015\034\016\023\017\042\020\036" +
    "\021\044\022\037\023\041\024\035\065\040\066\027\067" +
    "\026\070\032\001\002\000\004\046\131\001\002\000\040" +
    "\012\030\013\025\014\043\015\034\016\023\017\042\020" +
    "\036\021\044\022\037\023\041\024\035\065\040\066\027" +
    "\067\026\070\032\001\002\000\004\063\133\001\002\000" +
    "\012\005\ufff2\046\ufff2\054\ufff2\063\ufff2\001\002\000\042" +
    "\012\030\013\025\014\043\015\034\016\023\017\042\020" +
    "\036\021\044\022\037\023\041\024\035\065\040\066\027" +
    "\067\026\070\032\071\033\001\002\000\004\005\uffd6\001" +
    "\002\000\040\012\030\013\025\014\043\015\034\016\023" +
    "\017\042\020\036\021\044\022\037\023\041\024\035\065" +
    "\040\066\027\067\026\070\032\001\002\000\004\046\140" +
    "\001\002\000\040\012\030\013\025\014\043\015\034\016" +
    "\023\017\042\020\036\021\044\022\037\023\041\024\035" +
    "\065\040\066\027\067\026\070\032\001\002\000\004\063" +
    "\142\001\002\000\012\005\ufff5\046\ufff5\054\ufff5\063\ufff5" +
    "\001\002\000\040\012\030\013\025\014\043\015\034\016" +
    "\023\017\042\020\036\021\044\022\037\023\041\024\035" +
    "\065\040\066\027\067\026\070\032\001\002\000\004\046" +
    "\145\001\002\000\040\012\030\013\025\014\043\015\034" +
    "\016\023\017\042\020\036\021\044\022\037\023\041\024" +
    "\035\065\040\066\027\067\026\070\032\001\002\000\004" +
    "\063\147\001\002\000\012\005\ufff4\046\ufff4\054\ufff4\063" +
    "\ufff4\001\002\000\004\045\151\001\002\000\012\005\uffdb" +
    "\010\uffdb\011\uffdb\025\uffdb\001\002\000\040\012\030\013" +
    "\025\014\043\015\034\016\023\017\042\020\036\021\044" +
    "\022\037\023\041\024\035\065\040\066\027\067\026\070" +
    "\032\001\002\000\004\046\154\001\002\000\040\012\030" +
    "\013\025\014\043\015\034\016\023\017\042\020\036\021" +
    "\044\022\037\023\041\024\035\065\040\066\027\067\026" +
    "\070\032\001\002\000\004\063\156\001\002\000\012\005" +
    "\ufff1\046\ufff1\054\ufff1\063\ufff1\001\002\000\006\006\162" +
    "\007\160\001\002\000\004\044\ufff7\001\002\000\004\044" +
    "\165\001\002\000\004\053\163\001\002\000\004\054\164" +
    "\001\002\000\004\044\ufff8\001\002\000\004\044\166\001" +
    "\002\000\004\070\167\001\002\000\004\052\170\001\002" +
    "\000\004\057\171\001\002\000\040\012\030\013\025\014" +
    "\043\015\034\016\023\017\042\020\036\021\044\022\037" +
    "\023\041\024\035\065\040\066\027\067\026\070\032\001" +
    "\002\000\004\005\174\001\002\000\004\005\ufff6\001\002" +
    "\000\004\045\175\001\002\000\012\005\ufff9\010\ufff9\011" +
    "\ufff9\025\ufff9\001\002\000\012\005\ufffe\010\ufffe\011\ufffe" +
    "\025\ufffe\001\002\000\004\004\200\001\002\000\004\002" +
    "\000\001\002\000\006\006\162\007\160\001\002\000\004" +
    "\044\203\001\002\000\004\044\204\001\002\000\004\071" +
    "\205\001\002\000\004\052\206\001\002\000\004\057\207" +
    "\001\002\000\004\053\210\001\002\000\040\012\030\013" +
    "\025\014\043\015\034\016\023\017\042\020\036\021\044" +
    "\022\037\023\041\024\035\065\040\066\027\067\026\070" +
    "\032\001\002\000\004\054\215\001\002\000\006\046\213" +
    "\054\uffdc\001\002\000\040\012\030\013\025\014\043\015" +
    "\034\016\023\017\042\020\036\021\044\022\037\023\041" +
    "\024\035\065\040\066\027\067\026\070\032\001\002\000" +
    "\004\054\uffdd\001\002\000\004\005\216\001\002\000\004" +
    "\045\217\001\002\000\012\005\uffde\010\uffde\011\uffde\025" +
    "\uffde\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\216\000\004\002\003\001\001\000\002\001\001\000" +
    "\016\003\010\004\012\005\014\014\007\017\006\022\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\004\175\005\014\014\007\017\006\022\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\030\021" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\050\012\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\050\012" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\057\001\001\000" +
    "\002\001\001\000\004\011\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\050\012\066\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\050\012\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\050\012\104\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\050\012\113\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\050\012\122\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\127\001" +
    "\001\000\002\001\001\000\004\011\131\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\030\021\134\001" +
    "\001\000\002\001\001\000\004\011\136\001\001\000\002" +
    "\001\001\000\004\011\140\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\143\001\001\000\002\001\001" +
    "\000\004\011\145\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\152" +
    "\001\001\000\002\001\001\000\004\011\154\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\160\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\171\011\172\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\201\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\211\016\210\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\011\211\016\213\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




        public String resultado = ""; //Variable para mostrar en consola
        //public static LinkedList<Object> instrucciones; //Lista con instrucciones a ejecutar
        ImpresionConsola impresionC = new ImpresionConsola();
        Variables variables = new Variables();
        OperacionesAritmeticas operacionesArit = new OperacionesAritmeticas();


    public void syntax_error(Symbol s)
    {
            System.err.println("Identificador "+ s.value + " no reconocido. Se ha recuperado del error." );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            System.err.println("Identificador " +s.value + " no reconocido.");
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

  
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= PROGRAM instruccion END PROGRAM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instruccion ::= expresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instruccion ::= instruccion expresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expresiones ::= DeclararVariables 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expresiones ::= DeclararArreglos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expresiones ::= Impresion_consola 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expresiones ::= Impresion_graficas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DeclararVariables ::= VAR DOS_PUNTOS tipo DOS_PUNTOS DOS_PUNTOS ID MENOR_Q GUION expresionTipoVariables END PUNTO_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int expeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int experight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object expe = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
variables.addVariable(id,expe);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclararVariables",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tipo ::= CHAR1 A_CORCHETE C_CORCHETE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipo ::= DOUBLE1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expresionTipoVariables ::= operacionAritmetica 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionTipoVariables",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // operacionAritmetica ::= SUM A_PARENTESIS operacionAritmetica COMA operacionAritmetica C_PARENTESIS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = operacionesArit.SUM(a.toString(),b.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // operacionAritmetica ::= RES A_PARENTESIS operacionAritmetica COMA operacionAritmetica C_PARENTESIS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = operacionesArit.RES(a.toString(),b.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // operacionAritmetica ::= MUL A_PARENTESIS operacionAritmetica COMA operacionAritmetica C_PARENTESIS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = operacionesArit.MUL(a.toString(),b.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // operacionAritmetica ::= DIV A_PARENTESIS operacionAritmetica COMA operacionAritmetica C_PARENTESIS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = operacionesArit.DIV(a.toString(),b.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // operacionAritmetica ::= MOD A_PARENTESIS operacionAritmetica COMA operacionAritmetica C_PARENTESIS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = operacionesArit.MOD(a.toString(),b.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // operacionAritmetica ::= ENTERO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // operacionAritmetica ::= DECIMAL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // operacionAritmetica ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = variables.getVariable(val);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // operacionAritmetica ::= CADENA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.substring(1, val.length() - 1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // operacionAritmetica ::= MEDIA A_PARENTESIS A_CORCHETE operacionesEstad C_CORCHETE C_PARENTESIS 
            {
              Object RESULT =null;
		
                        RESULT = operacionesArit.Media(operacionesArit.listaEstadistica);operacionesArit.listaEstadistica.clear();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // operacionAritmetica ::= MEDIANA A_PARENTESIS A_CORCHETE operacionesEstad C_CORCHETE C_PARENTESIS 
            {
              Object RESULT =null;
		
                        RESULT = operacionesArit.Mediana(operacionesArit.listaEstadistica);operacionesArit.listaEstadistica.clear();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // operacionAritmetica ::= MODA A_PARENTESIS A_CORCHETE operacionesEstad C_CORCHETE C_PARENTESIS 
            {
              Object RESULT =null;
		
                        RESULT = operacionesArit.Moda(operacionesArit.listaEstadistica);operacionesArit.listaEstadistica.clear();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // operacionAritmetica ::= VARIANZA A_PARENTESIS A_CORCHETE operacionesEstad C_CORCHETE C_PARENTESIS 
            {
              Object RESULT =null;
		
                        RESULT = operacionesArit.Varianza(operacionesArit.listaEstadistica);operacionesArit.listaEstadistica.clear();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // operacionAritmetica ::= MAX A_PARENTESIS A_CORCHETE operacionesEstad C_CORCHETE C_PARENTESIS 
            {
              Object RESULT =null;
		
                        RESULT = operacionesArit.Maximo(operacionesArit.listaEstadistica);operacionesArit.listaEstadistica.clear();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // operacionAritmetica ::= MIN A_PARENTESIS A_CORCHETE operacionesEstad C_CORCHETE C_PARENTESIS 
            {
              Object RESULT =null;
		
                        RESULT = operacionesArit.Minimo(operacionesArit.listaEstadistica);operacionesArit.listaEstadistica.clear();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // operacionAritmetica ::= MEDIA A_PARENTESIS ID_ARREGLO C_PARENTESIS 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		

                                Object obj = variables.getVariable(val);
                                if (obj instanceof LinkedList) {
                                LinkedList<Object> lista = (LinkedList<Object>) obj;
                                RESULT = operacionesArit.Media(lista);
                                } else {
                                // Manejar el caso en el que el objeto no es un LinkedList
                                }
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operacionAritmetica ::= MEDIANA A_PARENTESIS ID_ARREGLO C_PARENTESIS 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		

                                Object obj = variables.getVariable(val);
                                if (obj instanceof LinkedList) {
                                LinkedList<Object> lista = (LinkedList<Object>) obj;
                                RESULT = operacionesArit.Mediana(lista);
                                } else {
                                // Manejar el caso en el que el objeto no es un LinkedList
                                }
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operacionAritmetica ::= MODA A_PARENTESIS ID_ARREGLO C_PARENTESIS 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		

                                Object obj = variables.getVariable(val);
                                if (obj instanceof LinkedList) {
                                LinkedList<Object> lista = (LinkedList<Object>) obj;
                                RESULT = operacionesArit.Moda(lista);
                                } else {
                                // Manejar el caso en el que el objeto no es un LinkedList
                                }
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // operacionAritmetica ::= VARIANZA A_PARENTESIS ID_ARREGLO C_PARENTESIS 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		

                                Object obj = variables.getVariable(val);
                                if (obj instanceof LinkedList) {
                                LinkedList<Object> lista = (LinkedList<Object>) obj;
                                RESULT = operacionesArit.Varianza(lista);
                                } else {
                                // Manejar el caso en el que el objeto no es un LinkedList
                                }
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // operacionAritmetica ::= MAX A_PARENTESIS ID_ARREGLO C_PARENTESIS 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		

                                Object obj = variables.getVariable(val);
                                if (obj instanceof LinkedList) {
                                LinkedList<Object> lista = (LinkedList<Object>) obj;
                                RESULT = operacionesArit.Maximo(lista);
                                } else {
                                // Manejar el caso en el que el objeto no es un LinkedList
                                }
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // operacionAritmetica ::= MIN A_PARENTESIS ID_ARREGLO C_PARENTESIS 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		

                                Object obj = variables.getVariable(val);
                                if (obj instanceof LinkedList) {
                                LinkedList<Object> lista = (LinkedList<Object>) obj;
                                RESULT = operacionesArit.Minimo(lista);
                                } else {
                                // Manejar el caso en el que el objeto no es un LinkedList
                                }
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // operacionesEstad ::= operacionAritmetica COMA operacionesEstad 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		operacionesArit.listaEstadistica.add(b.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionesEstad",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // operacionesEstad ::= operacionAritmetica 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		operacionesArit.listaEstadistica.add(c.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionesEstad",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DeclararArreglos ::= ARR DOS_PUNTOS tipo DOS_PUNTOS DOS_PUNTOS ID_ARREGLO MENOR_Q GUION A_CORCHETE OperacionesArreglos C_CORCHETE END PUNTO_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
                        variables.addVariable(id,new LinkedList<Object>(operacionesArit.ListaArreglos)); operacionesArit.ListaArreglos.clear(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclararArreglos",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OperacionesArreglos ::= operacionAritmetica COMA OperacionesArreglos 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT=operacionesArit.ListaArreglos.add(c.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperacionesArreglos",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OperacionesArreglos ::= operacionAritmetica 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= operacionesArit.ListaArreglos.add(b.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperacionesArreglos",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Impresion_consola ::= CONSOLE DOS_PUNTOS DOS_PUNTOS PRINT S_IGUAL elementoImpresion END PUNTO_COMA 
            {
              Object RESULT =null;
		 
    Collections.reverse(impresionC.lista_salida);
    for (int i = 0; i < impresionC.lista_salida.size(); i++) { 
            System.out.print(impresionC.lista_salida.get(i)); 
            if (i < impresionC.lista_salida.size() - 1) { 
                    System.out.print(","); 
                    } 
            }        
            System.out.println(); 
            impresionC.lista_salida.clear(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Impresion_consola",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // salida ::= elementoImpresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("salida",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // salida ::= salida COMA elementoImpresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("salida",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // elementoImpresion ::= ID_ARREGLO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		impresionC.lista_salida.add(variables.getVariable(val));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementoImpresion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // elementoImpresion ::= operacionAritmetica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		impresionC.lista_salida.add(a.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementoImpresion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // elementoImpresion ::= operacionAritmetica COMA elementoImpresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		impresionC.lista_salida.add(a.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementoImpresion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
