
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizador;

import java_cup.runtime.*;
import java.util.LinkedList;
import java.util.Collections;
import funciones.ImpresionConsola;
import funciones.Variables;
import funciones.OperacionesAritmeticas;
import Graficas.GraficaInfo;
import Graficas.GraficaBarrasInfo;
import Graficas.GraficaHistoInfo;
import Graficas.GraficaLineaInfo;
import Graficas.GraficaPieInfo;
import Graficas.AlmacenamientoGraficas;
import Graficas.GeneradorGraficas;
import Graficas.GraficaInfo;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Arrays;
import java.util.LinkedList;
import main.Interfaz;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\150\000\002\002\004\000\002\002\006\000\002\003" +
    "\003\000\002\003\004\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\004\000" +
    "\002\005\015\000\002\006\005\000\002\006\003\000\002" +
    "\007\003\000\002\011\010\000\002\011\010\000\002\011" +
    "\010\000\002\011\010\000\002\011\010\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\010\000\002\011\010\000\002\011\010\000\002" +
    "\011\010\000\002\011\010\000\002\011\010\000\002\011" +
    "\006\000\002\011\006\000\002\011\006\000\002\011\006" +
    "\000\002\011\006\000\002\011\006\000\002\012\005\000" +
    "\002\012\003\000\002\014\017\000\002\016\005\000\002" +
    "\016\003\000\002\017\010\000\002\020\005\000\002\020" +
    "\010\000\002\021\003\000\002\021\003\000\002\021\005" +
    "\000\002\022\003\000\002\022\003\000\002\023\005\000" +
    "\002\023\003\000\002\024\005\000\002\024\003\000\002" +
    "\025\010\000\002\025\010\000\002\025\010\000\002\025" +
    "\010\000\002\045\003\000\002\045\004\000\002\046\003" +
    "\000\002\046\004\000\002\047\003\000\002\047\004\000" +
    "\002\050\003\000\002\050\004\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\032\014\000\002\052\002" +
    "\000\002\033\015\000\002\053\002\000\002\034\013\000" +
    "\002\035\014\000\002\036\014\000\002\054\002\000\002" +
    "\037\015\000\002\055\002\000\002\040\013\000\002\041" +
    "\006\000\002\044\003\000\002\044\003\000\002\044\003" +
    "\000\002\044\003\000\002\043\003\000\002\043\003\000" +
    "\002\042\005\000\002\042\003\000\002\051\005\000\002" +
    "\051\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u012a\000\004\004\005\001\002\000\004\002\u012c\001" +
    "\002\000\022\003\016\010\013\011\006\025\022\026\014" +
    "\027\017\030\015\031\007\001\002\000\004\044\u011d\001" +
    "\002\000\004\062\u0113\001\002\000\024\003\ufffb\005\ufffb" +
    "\010\ufffb\011\ufffb\025\ufffb\026\ufffb\027\ufffb\030\ufffb\031" +
    "\ufffb\001\002\000\024\003\ufffc\005\ufffc\010\ufffc\011\ufffc" +
    "\025\ufffc\026\ufffc\027\ufffc\030\ufffc\031\ufffc\001\002\000" +
    "\024\003\016\005\u0111\010\013\011\006\025\022\026\014" +
    "\027\017\030\015\031\007\001\002\000\004\044\u0101\001" +
    "\002\000\004\062\342\001\002\000\004\062\325\001\002" +
    "\000\004\045\324\001\002\000\004\062\204\001\002\000" +
    "\024\003\uffff\005\uffff\010\uffff\011\uffff\025\uffff\026\uffff" +
    "\027\uffff\030\uffff\031\uffff\001\002\000\024\003\ufffd\005" +
    "\ufffd\010\ufffd\011\ufffd\025\ufffd\026\ufffd\027\ufffd\030\ufffd" +
    "\031\ufffd\001\002\000\004\044\024\001\002\000\024\003" +
    "\ufffa\005\ufffa\010\ufffa\011\ufffa\025\ufffa\026\ufffa\027\ufffa" +
    "\030\ufffa\031\ufffa\001\002\000\004\044\025\001\002\000" +
    "\006\042\026\043\030\001\002\000\004\064\176\001\002" +
    "\000\004\005\174\001\002\000\004\064\031\001\002\000" +
    "\006\067\034\070\032\001\002\000\004\057\uffd3\001\002" +
    "\000\004\057\035\001\002\000\004\057\uffd4\001\002\000" +
    "\004\051\036\001\002\000\006\053\040\071\037\001\002" +
    "\000\004\005\uffd1\001\002\000\040\012\045\013\046\014" +
    "\061\015\055\016\047\017\060\020\043\021\054\022\052" +
    "\023\050\024\062\065\051\066\044\067\042\070\056\001" +
    "\002\000\004\005\uffd8\001\002\000\012\005\uffec\046\uffec" +
    "\054\uffec\063\uffec\001\002\000\004\062\165\001\002\000" +
    "\012\005\uffee\046\uffee\054\uffee\063\uffee\001\002\000\004" +
    "\062\160\001\002\000\004\062\153\001\002\000\004\062" +
    "\146\001\002\000\004\062\137\001\002\000\012\005\uffef" +
    "\046\uffef\054\uffef\063\uffef\001\002\000\004\062\130\001" +
    "\002\000\004\054\127\001\002\000\004\062\120\001\002" +
    "\000\004\062\113\001\002\000\012\005\uffed\046\uffed\054" +
    "\uffed\063\uffed\001\002\000\006\046\111\054\uffcf\001\002" +
    "\000\004\062\102\001\002\000\004\062\075\001\002\000" +
    "\004\062\063\001\002\000\006\053\065\071\064\001\002" +
    "\000\004\063\074\001\002\000\040\012\045\013\046\014" +
    "\061\015\055\016\047\017\060\020\043\021\054\022\052" +
    "\023\050\024\062\065\051\066\044\067\042\070\056\001" +
    "\002\000\004\054\072\001\002\000\006\046\070\054\uffde" +
    "\001\002\000\040\012\045\013\046\014\061\015\055\016" +
    "\047\017\060\020\043\021\054\022\052\023\050\024\062" +
    "\065\051\066\044\067\042\070\056\001\002\000\004\054" +
    "\uffdf\001\002\000\004\063\073\001\002\000\012\005\uffe6" +
    "\046\uffe6\054\uffe6\063\uffe6\001\002\000\012\005\uffe0\046" +
    "\uffe0\054\uffe0\063\uffe0\001\002\000\040\012\045\013\046" +
    "\014\061\015\055\016\047\017\060\020\043\021\054\022" +
    "\052\023\050\024\062\065\051\066\044\067\042\070\056" +
    "\001\002\000\004\046\077\001\002\000\040\012\045\013" +
    "\046\014\061\015\055\016\047\017\060\020\043\021\054" +
    "\022\052\023\050\024\062\065\051\066\044\067\042\070" +
    "\056\001\002\000\004\063\101\001\002\000\012\005\ufff2" +
    "\046\ufff2\054\ufff2\063\ufff2\001\002\000\006\053\104\071" +
    "\103\001\002\000\004\063\110\001\002\000\040\012\045" +
    "\013\046\014\061\015\055\016\047\017\060\020\043\021" +
    "\054\022\052\023\050\024\062\065\051\066\044\067\042" +
    "\070\056\001\002\000\004\054\106\001\002\000\004\063" +
    "\107\001\002\000\012\005\uffeb\046\uffeb\054\uffeb\063\uffeb" +
    "\001\002\000\012\005\uffe5\046\uffe5\054\uffe5\063\uffe5\001" +
    "\002\000\040\012\045\013\046\014\061\015\055\016\047" +
    "\017\060\020\043\021\054\022\052\023\050\024\062\065" +
    "\051\066\044\067\042\070\056\001\002\000\004\054\uffd0" +
    "\001\002\000\040\012\045\013\046\014\061\015\055\016" +
    "\047\017\060\020\043\021\054\022\052\023\050\024\062" +
    "\065\051\066\044\067\042\070\056\001\002\000\004\046" +
    "\115\001\002\000\040\012\045\013\046\014\061\015\055" +
    "\016\047\017\060\020\043\021\054\022\052\023\050\024" +
    "\062\065\051\066\044\067\042\070\056\001\002\000\004" +
    "\063\117\001\002\000\012\005\ufff1\046\ufff1\054\ufff1\063" +
    "\ufff1\001\002\000\006\053\122\071\121\001\002\000\004" +
    "\063\126\001\002\000\040\012\045\013\046\014\061\015" +
    "\055\016\047\017\060\020\043\021\054\022\052\023\050" +
    "\024\062\065\051\066\044\067\042\070\056\001\002\000" +
    "\004\054\124\001\002\000\004\063\125\001\002\000\012" +
    "\005\uffe9\046\uffe9\054\uffe9\063\uffe9\001\002\000\012\005" +
    "\uffe3\046\uffe3\054\uffe3\063\uffe3\001\002\000\004\005\uffd2" +
    "\001\002\000\006\053\132\071\131\001\002\000\004\063" +
    "\136\001\002\000\040\012\045\013\046\014\061\015\055" +
    "\016\047\017\060\020\043\021\054\022\052\023\050\024" +
    "\062\065\051\066\044\067\042\070\056\001\002\000\004" +
    "\054\134\001\002\000\004\063\135\001\002\000\012\005" +
    "\uffe8\046\uffe8\054\uffe8\063\uffe8\001\002\000\012\005\uffe2" +
    "\046\uffe2\054\uffe2\063\uffe2\001\002\000\006\053\141\071" +
    "\140\001\002\000\004\063\145\001\002\000\040\012\045" +
    "\013\046\014\061\015\055\016\047\017\060\020\043\021" +
    "\054\022\052\023\050\024\062\065\051\066\044\067\042" +
    "\070\056\001\002\000\004\054\143\001\002\000\004\063" +
    "\144\001\002\000\012\005\uffe7\046\uffe7\054\uffe7\063\uffe7" +
    "\001\002\000\012\005\uffe1\046\uffe1\054\uffe1\063\uffe1\001" +
    "\002\000\040\012\045\013\046\014\061\015\055\016\047" +
    "\017\060\020\043\021\054\022\052\023\050\024\062\065" +
    "\051\066\044\067\042\070\056\001\002\000\004\046\150" +
    "\001\002\000\040\012\045\013\046\014\061\015\055\016" +
    "\047\017\060\020\043\021\054\022\052\023\050\024\062" +
    "\065\051\066\044\067\042\070\056\001\002\000\004\063" +
    "\152\001\002\000\012\005\ufff0\046\ufff0\054\ufff0\063\ufff0" +
    "\001\002\000\040\012\045\013\046\014\061\015\055\016" +
    "\047\017\060\020\043\021\054\022\052\023\050\024\062" +
    "\065\051\066\044\067\042\070\056\001\002\000\004\046" +
    "\155\001\002\000\040\012\045\013\046\014\061\015\055" +
    "\016\047\017\060\020\043\021\054\022\052\023\050\024" +
    "\062\065\051\066\044\067\042\070\056\001\002\000\004" +
    "\063\157\001\002\000\012\005\ufff3\046\ufff3\054\ufff3\063" +
    "\ufff3\001\002\000\040\012\045\013\046\014\061\015\055" +
    "\016\047\017\060\020\043\021\054\022\052\023\050\024" +
    "\062\065\051\066\044\067\042\070\056\001\002\000\004" +
    "\046\162\001\002\000\040\012\045\013\046\014\061\015" +
    "\055\016\047\017\060\020\043\021\054\022\052\023\050" +
    "\024\062\065\051\066\044\067\042\070\056\001\002\000" +
    "\004\063\164\001\002\000\012\005\ufff4\046\ufff4\054\ufff4" +
    "\063\ufff4\001\002\000\006\053\167\071\166\001\002\000" +
    "\004\063\173\001\002\000\040\012\045\013\046\014\061" +
    "\015\055\016\047\017\060\020\043\021\054\022\052\023" +
    "\050\024\062\065\051\066\044\067\042\070\056\001\002" +
    "\000\004\054\171\001\002\000\004\063\172\001\002\000" +
    "\012\005\uffea\046\uffea\054\uffea\063\uffea\001\002\000\012" +
    "\005\uffe4\046\uffe4\054\uffe4\063\uffe4\001\002\000\004\045" +
    "\175\001\002\000\024\003\uffda\005\uffda\010\uffda\011\uffda" +
    "\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda\001\002\000" +
    "\042\012\045\013\046\014\061\015\055\016\047\017\060" +
    "\020\043\021\054\022\052\023\050\024\062\065\051\066" +
    "\044\067\042\070\056\071\201\001\002\000\004\005\uffd9" +
    "\001\002\000\006\005\uffd6\046\202\001\002\000\004\005" +
    "\uffd7\001\002\000\042\012\045\013\046\014\061\015\055" +
    "\016\047\017\060\020\043\021\054\022\052\023\050\024" +
    "\062\065\051\066\044\067\042\070\056\071\201\001\002" +
    "\000\004\005\uffd5\001\002\000\016\032\207\033\206\034" +
    "\205\035\215\036\213\037\210\001\002\000\004\044\314" +
    "\001\002\000\004\044\273\001\002\000\004\044\262\001" +
    "\002\000\012\026\257\027\253\030\254\031\256\001\002" +
    "\000\020\032\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037" +
    "\uffbe\063\uffbe\001\002\000\020\032\uffc2\033\uffc2\034\uffc2" +
    "\035\uffc2\036\uffc2\037\uffc2\063\uffc2\001\002\000\004\044" +
    "\242\001\002\000\020\032\uffc0\033\uffc0\034\uffc0\035\uffc0" +
    "\036\uffc0\037\uffc0\063\uffc0\001\002\000\004\044\227\001" +
    "\002\000\020\032\207\033\206\034\205\035\215\036\213" +
    "\037\210\063\uffca\001\002\000\020\032\uffbf\033\uffbf\034" +
    "\uffbf\035\uffbf\036\uffbf\037\uffbf\063\uffbf\001\002\000\020" +
    "\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\063" +
    "\uffc1\001\002\000\020\032\uffbd\033\uffbd\034\uffbd\035\uffbd" +
    "\036\uffbd\037\uffbd\063\uffbd\001\002\000\004\063\223\001" +
    "\002\000\004\005\224\001\002\000\004\045\225\001\002" +
    "\000\024\003\uffce\005\uffce\010\uffce\011\uffce\025\uffce\026" +
    "\uffce\027\uffce\030\uffce\031\uffce\001\002\000\004\063\uffc9" +
    "\001\002\000\004\044\230\001\002\000\004\006\231\001" +
    "\002\000\004\053\232\001\002\000\004\054\233\001\002" +
    "\000\004\064\234\001\002\000\006\067\237\070\235\001" +
    "\002\000\004\005\uff9e\001\002\000\004\005\240\001\002" +
    "\000\004\005\uff9f\001\002\000\004\045\241\001\002\000" +
    "\020\032\uffaa\033\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa" +
    "\063\uffaa\001\002\000\004\044\243\001\002\000\004\006" +
    "\244\001\002\000\004\053\245\001\002\000\004\054\246" +
    "\001\002\000\004\064\247\001\002\000\006\067\237\070" +
    "\235\001\002\000\004\005\251\001\002\000\004\045\252" +
    "\001\002\000\020\032\uffa9\033\uffa9\034\uffa9\035\uffa9\036" +
    "\uffa9\037\uffa9\063\uffa9\001\002\000\004\005\uffa3\001\002" +
    "\000\004\005\uffa1\001\002\000\004\005\260\001\002\000" +
    "\004\005\uffa0\001\002\000\004\005\uffa2\001\002\000\004" +
    "\045\261\001\002\000\024\032\uffa4\033\uffa4\034\uffa4\035" +
    "\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4\063\uffa4\001\002" +
    "\000\004\044\263\001\002\000\004\006\264\001\002\000" +
    "\004\053\265\001\002\000\004\054\266\001\002\000\004" +
    "\064\267\001\002\000\006\067\237\070\235\001\002\000" +
    "\004\005\271\001\002\000\004\045\272\001\002\000\024" +
    "\032\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf\040" +
    "\uffaf\041\uffaf\063\uffaf\001\002\000\004\044\274\001\002" +
    "\000\004\006\275\001\002\000\004\053\276\001\002\000" +
    "\004\054\277\001\002\000\004\064\300\001\002\000\006" +
    "\053\uffae\071\uffae\001\002\000\006\053\304\071\303\001" +
    "\002\000\004\005\312\001\002\000\004\005\uff9a\001\002" +
    "\000\040\012\045\013\046\014\061\015\055\016\047\017" +
    "\060\020\043\021\054\022\052\023\050\024\062\065\051" +
    "\066\044\067\042\070\056\001\002\000\006\046\310\054" +
    "\uff9c\001\002\000\004\054\307\001\002\000\004\005\uff9b" +
    "\001\002\000\040\012\045\013\046\014\061\015\055\016" +
    "\047\017\060\020\043\021\054\022\052\023\050\024\062" +
    "\065\051\066\044\067\042\070\056\001\002\000\004\054" +
    "\uff9d\001\002\000\004\045\313\001\002\000\020\032\uffad" +
    "\033\uffad\034\uffad\035\uffad\036\uffad\037\uffad\063\uffad\001" +
    "\002\000\004\044\315\001\002\000\004\007\316\001\002" +
    "\000\004\064\317\001\002\000\006\053\uffac\071\uffac\001" +
    "\002\000\006\053\304\071\303\001\002\000\004\005\322" +
    "\001\002\000\004\045\323\001\002\000\020\032\uffab\033" +
    "\uffab\034\uffab\035\uffab\036\uffab\037\uffab\063\uffab\001\002" +
    "\000\024\003\ufff9\005\ufff9\010\ufff9\011\ufff9\025\ufff9\026" +
    "\ufff9\027\ufff9\030\ufff9\031\ufff9\001\002\000\016\032\207" +
    "\033\206\034\205\035\215\036\213\037\210\001\002\000" +
    "\020\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4" +
    "\063\uffb4\001\002\000\020\032\uffb6\033\uffb6\034\uffb6\035" +
    "\uffb6\036\uffb6\037\uffb6\063\uffb6\001\002\000\020\032\uffb8" +
    "\033\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8\063\uffb8\001" +
    "\002\000\020\032\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5" +
    "\037\uffb5\063\uffb5\001\002\000\020\032\207\033\206\034" +
    "\205\035\215\036\213\037\210\063\uffc6\001\002\000\020" +
    "\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7\063" +
    "\uffb7\001\002\000\020\032\uffb3\033\uffb3\034\uffb3\035\uffb3" +
    "\036\uffb3\037\uffb3\063\uffb3\001\002\000\004\063\336\001" +
    "\002\000\004\005\337\001\002\000\004\045\340\001\002" +
    "\000\024\003\uffcc\005\uffcc\010\uffcc\011\uffcc\025\uffcc\026" +
    "\uffcc\027\uffcc\030\uffcc\031\uffcc\001\002\000\004\063\uffc5" +
    "\001\002\000\012\032\207\037\210\040\350\041\352\001" +
    "\002\000\014\032\207\037\210\040\350\041\352\063\uffc8" +
    "\001\002\000\014\032\uffbc\037\uffbc\040\uffbc\041\uffbc\063" +
    "\uffbc\001\002\000\014\032\uffba\037\uffba\040\uffba\041\uffba" +
    "\063\uffba\001\002\000\004\063\375\001\002\000\014\032" +
    "\uffbb\037\uffbb\040\uffbb\041\uffbb\063\uffbb\001\002\000\004" +
    "\044\363\001\002\000\014\032\uffb9\037\uffb9\040\uffb9\041" +
    "\uffb9\063\uffb9\001\002\000\004\044\353\001\002\000\004" +
    "\044\354\001\002\000\004\007\355\001\002\000\004\064" +
    "\356\001\002\000\006\053\uffa6\071\uffa6\001\002\000\006" +
    "\053\304\071\303\001\002\000\004\005\361\001\002\000" +
    "\004\045\362\001\002\000\014\032\uffa5\037\uffa5\040\uffa5" +
    "\041\uffa5\063\uffa5\001\002\000\004\044\364\001\002\000" +
    "\004\006\365\001\002\000\004\053\366\001\002\000\004" +
    "\054\367\001\002\000\004\064\370\001\002\000\006\053" +
    "\uffa8\071\uffa8\001\002\000\006\053\304\071\303\001\002" +
    "\000\004\005\373\001\002\000\004\045\374\001\002\000" +
    "\014\032\uffa7\037\uffa7\040\uffa7\041\uffa7\063\uffa7\001\002" +
    "\000\004\005\376\001\002\000\004\045\377\001\002\000" +
    "\024\003\uffcd\005\uffcd\010\uffcd\011\uffcd\025\uffcd\026\uffcd" +
    "\027\uffcd\030\uffcd\031\uffcd\001\002\000\004\063\uffc7\001" +
    "\002\000\006\006\u0104\007\u0102\001\002\000\004\044\ufff6" +
    "\001\002\000\004\044\u0107\001\002\000\004\053\u0105\001" +
    "\002\000\004\054\u0106\001\002\000\004\044\ufff7\001\002" +
    "\000\004\044\u0108\001\002\000\004\070\u0109\001\002\000" +
    "\004\052\u010a\001\002\000\004\057\u010b\001\002\000\040" +
    "\012\045\013\046\014\061\015\055\016\047\017\060\020" +
    "\043\021\054\022\052\023\050\024\062\065\051\066\044" +
    "\067\042\070\056\001\002\000\004\005\u010e\001\002\000" +
    "\004\005\ufff5\001\002\000\004\045\u010f\001\002\000\024" +
    "\003\ufff8\005\ufff8\010\ufff8\011\ufff8\025\ufff8\026\ufff8\027" +
    "\ufff8\030\ufff8\031\ufff8\001\002\000\024\003\ufffe\005\ufffe" +
    "\010\ufffe\011\ufffe\025\ufffe\026\ufffe\027\ufffe\030\ufffe\031" +
    "\ufffe\001\002\000\004\004\u0112\001\002\000\004\002\000" +
    "\001\002\000\010\032\207\037\210\041\352\001\002\000" +
    "\012\032\uffb2\037\uffb2\041\uffb2\063\uffb2\001\002\000\012" +
    "\032\207\037\210\041\352\063\uffc4\001\002\000\012\032" +
    "\uffb1\037\uffb1\041\uffb1\063\uffb1\001\002\000\012\032\uffb0" +
    "\037\uffb0\041\uffb0\063\uffb0\001\002\000\004\063\u0119\001" +
    "\002\000\004\005\u011a\001\002\000\004\045\u011b\001\002" +
    "\000\024\003\uffcb\005\uffcb\010\uffcb\011\uffcb\025\uffcb\026" +
    "\uffcb\027\uffcb\030\uffcb\031\uffcb\001\002\000\004\063\uffc3" +
    "\001\002\000\006\006\u0104\007\u0102\001\002\000\004\044" +
    "\u011f\001\002\000\004\044\u0120\001\002\000\004\071\u0121" +
    "\001\002\000\004\052\u0122\001\002\000\004\057\u0123\001" +
    "\002\000\004\053\u0124\001\002\000\040\012\045\013\046" +
    "\014\061\015\055\016\047\017\060\020\043\021\054\022" +
    "\052\023\050\024\062\065\051\066\044\067\042\070\056" +
    "\001\002\000\004\054\u0129\001\002\000\006\046\u0127\054" +
    "\uffdb\001\002\000\040\012\045\013\046\014\061\015\055" +
    "\016\047\017\060\020\043\021\054\022\052\023\050\024" +
    "\062\065\051\066\044\067\042\070\056\001\002\000\004" +
    "\054\uffdc\001\002\000\004\005\u012a\001\002\000\004\045" +
    "\u012b\001\002\000\024\003\uffdd\005\uffdd\010\uffdd\011\uffdd" +
    "\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u012a\000\004\002\003\001\001\000\002\001\001\000" +
    "\016\003\011\004\017\005\020\014\010\017\007\025\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\004\u010f\005\020\014\010" +
    "\017\007\025\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\040\001" +
    "\001\000\002\001\001\000\006\011\056\024\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\066\012\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\066\012\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\075\001\001\000\002\001\001" +
    "\000\004\011\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\066" +
    "\012\104\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\056\024\111" +
    "\001\001\000\002\001\001\000\004\011\113\001\001\000" +
    "\002\001\001\000\004\011\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\066\012\122\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\066" +
    "\012\132\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\066\012\141\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\146\001\001\000\002\001\001\000\004\011" +
    "\150\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\153\001\001\000\002\001\001\000\004\011\155\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\160" +
    "\001\001\000\002\001\001\000\004\011\162\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\066\012\167\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\177\021" +
    "\176\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\177\021\202\001\001\000\002\001" +
    "\001\000\022\026\215\032\211\033\217\034\213\035\216" +
    "\036\210\041\220\045\221\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\044\254\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\026\215\032\211" +
    "\033\217\034\213\035\216\036\210\041\220\045\225\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\043\235\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\043\247\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\043\267" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\052\300\001" +
    "\001\000\004\051\301\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\304\042\305\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\304" +
    "\042\310\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\053\317\001\001\000\004\051\320\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\030\331\032\327\033\332\034" +
    "\326\035\330\036\325\041\333\047\334\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\030\331\032\327\033\332\034\326\035\330" +
    "\036\325\041\333\047\340\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\027" +
    "\342\032\344\037\343\040\346\041\350\046\345\001\001" +
    "\000\016\027\342\032\344\037\343\040\346\041\350\046" +
    "\377\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\055\356\001\001\000\004\051" +
    "\357\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\054\370" +
    "\001\001\000\004\051\371\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\u0102\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\u010b\011\u010c\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\031" +
    "\u0114\032\u0113\040\u0115\041\u0116\050\u0117\001\001\000\002" +
    "\001\001\000\014\031\u0114\032\u0113\040\u0115\041\u0116\050" +
    "\u011b\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\u011d\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\u0125" +
    "\016\u0124\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\u0125\016\u0127\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public String resultado = ""; //Variable para mostrar en consola

    ImpresionConsola impresionC = new ImpresionConsola();
    Variables variables = new Variables();
    OperacionesAritmeticas operacionesArit = new OperacionesAritmeticas();

    GraficaInfo grafica_info = new GraficaInfo();

    private Interfaz interfaz;
    
    public void setInterfaz(Interfaz interfaz) {
            this.interfaz = interfaz;
        }

    public void syntax_error(Symbol s)
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

  
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= PROGRAM instruccion END PROGRAM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instruccion ::= expresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instruccion ::= instruccion expresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expresiones ::= DeclararVariables 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expresiones ::= DeclararArreglos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expresiones ::= imprimirTipos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expresiones ::= Impresion_graficas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expresiones ::= error PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DeclararVariables ::= VAR DOS_PUNTOS tipo DOS_PUNTOS DOS_PUNTOS ID MENOR_Q GUION expresionTipoVariables END PUNTO_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int expeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int experight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object expe = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
variables.addVariable(id,expe);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclararVariables",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipo ::= CHAR1 A_CORCHETE C_CORCHETE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipo ::= DOUBLE1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expresionTipoVariables ::= operacionAritmetica 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresionTipoVariables",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // operacionAritmetica ::= SUM A_PARENTESIS operacionAritmetica COMA operacionAritmetica C_PARENTESIS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = operacionesArit.SUM(a.toString(),b.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // operacionAritmetica ::= RES A_PARENTESIS operacionAritmetica COMA operacionAritmetica C_PARENTESIS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = operacionesArit.RES(a.toString(),b.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // operacionAritmetica ::= MUL A_PARENTESIS operacionAritmetica COMA operacionAritmetica C_PARENTESIS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = operacionesArit.MUL(a.toString(),b.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // operacionAritmetica ::= DIV A_PARENTESIS operacionAritmetica COMA operacionAritmetica C_PARENTESIS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = operacionesArit.DIV(a.toString(),b.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // operacionAritmetica ::= MOD A_PARENTESIS operacionAritmetica COMA operacionAritmetica C_PARENTESIS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = operacionesArit.MOD(a.toString(),b.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // operacionAritmetica ::= ENTERO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // operacionAritmetica ::= DECIMAL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // operacionAritmetica ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = variables.getVariable(val);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // operacionAritmetica ::= CADENA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.substring(1, val.length() - 1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // operacionAritmetica ::= MEDIA A_PARENTESIS A_CORCHETE operacionesEstad C_CORCHETE C_PARENTESIS 
            {
              Object RESULT =null;
		
                        RESULT = operacionesArit.Media(operacionesArit.listaEstadistica);operacionesArit.listaEstadistica.clear();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // operacionAritmetica ::= MEDIANA A_PARENTESIS A_CORCHETE operacionesEstad C_CORCHETE C_PARENTESIS 
            {
              Object RESULT =null;
		
                        RESULT = operacionesArit.Mediana(operacionesArit.listaEstadistica);operacionesArit.listaEstadistica.clear();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // operacionAritmetica ::= MODA A_PARENTESIS A_CORCHETE operacionesEstad C_CORCHETE C_PARENTESIS 
            {
              Object RESULT =null;
		
                        RESULT = operacionesArit.Moda(operacionesArit.listaEstadistica);operacionesArit.listaEstadistica.clear();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // operacionAritmetica ::= VARIANZA A_PARENTESIS A_CORCHETE operacionesEstad C_CORCHETE C_PARENTESIS 
            {
              Object RESULT =null;
		
                        RESULT = operacionesArit.Varianza(operacionesArit.listaEstadistica);operacionesArit.listaEstadistica.clear();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // operacionAritmetica ::= MAX A_PARENTESIS A_CORCHETE operacionesEstad C_CORCHETE C_PARENTESIS 
            {
              Object RESULT =null;
		
                        RESULT = operacionesArit.Maximo(operacionesArit.listaEstadistica);operacionesArit.listaEstadistica.clear();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // operacionAritmetica ::= MIN A_PARENTESIS A_CORCHETE operacionesEstad C_CORCHETE C_PARENTESIS 
            {
              Object RESULT =null;
		
                        RESULT = operacionesArit.Minimo(operacionesArit.listaEstadistica);operacionesArit.listaEstadistica.clear();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operacionAritmetica ::= MEDIA A_PARENTESIS ID_ARREGLO C_PARENTESIS 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		

                                Object obj = variables.getVariable(val);
                                if (obj instanceof LinkedList) {
                                LinkedList<Object> lista = (LinkedList<Object>) obj;
                                RESULT = operacionesArit.Media(lista);
                                } else {
                                // Manejar el caso en el que el objeto no es un LinkedList
                                }
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operacionAritmetica ::= MEDIANA A_PARENTESIS ID_ARREGLO C_PARENTESIS 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		

                                Object obj = variables.getVariable(val);
                                if (obj instanceof LinkedList) {
                                LinkedList<Object> lista = (LinkedList<Object>) obj;
                                RESULT = operacionesArit.Mediana(lista);
                                } else {
                                // Manejar el caso en el que el objeto no es un LinkedList
                                }
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // operacionAritmetica ::= MODA A_PARENTESIS ID_ARREGLO C_PARENTESIS 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		

                                Object obj = variables.getVariable(val);
                                if (obj instanceof LinkedList) {
                                LinkedList<Object> lista = (LinkedList<Object>) obj;
                                RESULT = operacionesArit.Moda(lista);
                                } else {
                                // Manejar el caso en el que el objeto no es un LinkedList
                                }
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // operacionAritmetica ::= VARIANZA A_PARENTESIS ID_ARREGLO C_PARENTESIS 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		

                                Object obj = variables.getVariable(val);
                                if (obj instanceof LinkedList) {
                                LinkedList<Object> lista = (LinkedList<Object>) obj;
                                RESULT = operacionesArit.Varianza(lista);
                                } else {
                                // Manejar el caso en el que el objeto no es un LinkedList
                                }
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // operacionAritmetica ::= MAX A_PARENTESIS ID_ARREGLO C_PARENTESIS 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		

                                Object obj = variables.getVariable(val);
                                if (obj instanceof LinkedList) {
                                LinkedList<Object> lista = (LinkedList<Object>) obj;
                                RESULT = operacionesArit.Maximo(lista);
                                } else {
                                // Manejar el caso en el que el objeto no es un LinkedList
                                }
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // operacionAritmetica ::= MIN A_PARENTESIS ID_ARREGLO C_PARENTESIS 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		

                                Object obj = variables.getVariable(val);
                                if (obj instanceof LinkedList) {
                                LinkedList<Object> lista = (LinkedList<Object>) obj;
                                RESULT = operacionesArit.Minimo(lista);
                                } else {
                                // Manejar el caso en el que el objeto no es un LinkedList
                                }
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionAritmetica",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // operacionesEstad ::= operacionAritmetica COMA operacionesEstad 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = operacionesArit.listaEstadistica.add(b.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionesEstad",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // operacionesEstad ::= operacionAritmetica 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = operacionesArit.listaEstadistica.add(c.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionesEstad",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DeclararArreglos ::= ARR DOS_PUNTOS tipo DOS_PUNTOS DOS_PUNTOS ID_ARREGLO MENOR_Q GUION A_CORCHETE OperacionesArreglos C_CORCHETE END PUNTO_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
                        variables.addVariable(id,new LinkedList<Object>(operacionesArit.ListaArreglos)); operacionesArit.ListaArreglos.clear(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclararArreglos",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OperacionesArreglos ::= operacionAritmetica COMA OperacionesArreglos 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT=operacionesArit.ListaArreglos.add(c.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperacionesArreglos",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OperacionesArreglos ::= operacionAritmetica 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= operacionesArit.ListaArreglos.add(b.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperacionesArreglos",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // imprimirTipos ::= CONSOLE DOS_PUNTOS DOS_PUNTOS tiposImpresion END PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imprimirTipos",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // tiposImpresion ::= PRINT S_IGUAL elementoImpresion 
            {
              Object RESULT =null;
		 
                        Collections.reverse(impresionC.lista_salida);
                        for (int i = 0; i < impresionC.lista_salida.size(); i++) { 
                                interfaz.appendConsolaText(impresionC.lista_salida.get(i).toString(), false); 
                                if (i < impresionC.lista_salida.size() - 1) { 
                                        interfaz.appendConsolaText(", ", false); 
                                        } 
                                }
                                interfaz.appendConsolaText("", true);       
                                impresionC.lista_salida.clear(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tiposImpresion",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // tiposImpresion ::= COLUMNA S_IGUAL titulo_arreglo GUION MAYOR_Q arreglo_contenido 
            {
              Object RESULT =null;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object titulo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
                        interfaz.appendConsolaText("------------------------",true);
                        interfaz.appendConsolaText(titulo.toString(), true);
                        interfaz.appendConsolaText("------------------------", true);
                        Collections.reverse(impresionC.lista_columnas);
                        for (int i = 0; i < impresionC.lista_columnas.size(); i++){
                                interfaz.appendConsolaText(impresionC.lista_columnas.get(i).toString(), true);
                                if(i<impresionC.lista_columnas.size()-1){
                                    //System.out.println();    
                                }
                        }
                        interfaz.appendConsolaText(" ", true); 
                        impresionC.lista_columnas.clear();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tiposImpresion",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // elementoImpresion ::= ID_ARREGLO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		impresionC.lista_salida.add(variables.getVariable(val));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementoImpresion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // elementoImpresion ::= operacionAritmetica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		impresionC.lista_salida.add(a.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementoImpresion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // elementoImpresion ::= operacionAritmetica COMA elementoImpresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		impresionC.lista_salida.add(a.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementoImpresion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // titulo_arreglo ::= CADENA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.substring(1, val.length() - 1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("titulo_arreglo",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // titulo_arreglo ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = variables.getVariable(val);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("titulo_arreglo",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // arreglo_contenido ::= A_CORCHETE OperacionImpresionArreglos C_CORCHETE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo_contenido",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // arreglo_contenido ::= ID_ARREGLO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		LinkedList<Object> temp = (LinkedList<Object>) variables.getVariable(val);
                                for (Object obj : temp) {
                                impresionC.lista_columnas.add(obj);
                                }
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo_contenido",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OperacionImpresionArreglos ::= operacionAritmetica COMA OperacionImpresionArreglos 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT=impresionC.lista_columnas.add(c.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperacionImpresionArreglos",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OperacionImpresionArreglos ::= operacionAritmetica 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=impresionC.lista_columnas.add(b.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperacionImpresionArreglos",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Impresion_graficas ::= GraphBar A_PARENTESIS barras C_PARENTESIS END PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Impresion_graficas",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Impresion_graficas ::= GraphPie A_PARENTESIS pie C_PARENTESIS END PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Impresion_graficas",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Impresion_graficas ::= GraphLine A_PARENTESIS linea C_PARENTESIS END PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Impresion_graficas",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Impresion_graficas ::= HISTOGRAM A_PARENTESIS histograma C_PARENTESIS END PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Impresion_graficas",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // barras ::= graficaBarras 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("barras",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // barras ::= graficaBarras barras 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("barras",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // pie ::= graficaPie 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pie",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // pie ::= graficaPie pie 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pie",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // linea ::= graficaLinea 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("linea",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // linea ::= graficaLinea linea 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("linea",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // histograma ::= graficaHistograma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("histograma",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // histograma ::= graficaHistograma histograma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("histograma",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // graficaBarras ::= tituloGrafica 
            {
              Object RESULT =null;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object titulo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		grafica_info.putGraficaBarras("titulo",titulo.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficaBarras",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // graficaBarras ::= ejeXGrafica 
            {
              Object RESULT =null;
		int eXleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eXright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object eX = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		grafica_info.putGraficaBarras("ejeX",eX);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficaBarras",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // graficaBarras ::= ejeYGrafica 
            {
              Object RESULT =null;
		int eYleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eYright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object eY = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		grafica_info.putGraficaBarras("ejeY", eY);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficaBarras",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // graficaBarras ::= tituloXGrafica 
            {
              Object RESULT =null;
		int tituloXleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tituloXright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tituloX = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		grafica_info.putGraficaBarras("tituloX", tituloX.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficaBarras",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // graficaBarras ::= tituloYGrafica 
            {
              Object RESULT =null;
		int tituloYleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tituloYright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tituloY = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		grafica_info.putGraficaBarras("tituloY", tituloY.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficaBarras",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // graficaBarras ::= execGraficas 
            {
              Object RESULT =null;
		
                        GraficaBarrasInfo grafica_barra = new GraficaBarrasInfo();

                        grafica_barra.setTitulo((String) grafica_info.getGraficaBarras("titulo"));
                        grafica_barra.setEjeX((List<String>) grafica_info.getGraficaBarras("ejeX"));
                        grafica_barra.setEjeY((List<String>) grafica_info.getGraficaBarras("ejeY"));
                        grafica_barra.setTituloX((String) grafica_info.getGraficaBarras("tituloX"));
                        grafica_barra.setTituloY((String) grafica_info.getGraficaBarras("tituloY"));

                        AlmacenamientoGraficas.listaGraficasBarras.add(grafica_barra);
                        GraficaInfo.componentesGraficaBarras.clear();
                        GeneradorGraficas.generarTodasLasGraficasBarras(AlmacenamientoGraficas.listaGraficasBarras);
                        interfaz.appendConsolaText("Grafica de Barras generada", true);

                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficaBarras",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // graficaPie ::= labelGrafica 
            {
              Object RESULT =null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object label = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		grafica_info.putGraficaPie("label",label);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficaPie",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // graficaPie ::= valuesGrafica 
            {
              Object RESULT =null;
		int valuesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valuesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object values = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		grafica_info.putGraficaPie("values",values);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficaPie",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // graficaPie ::= tituloGrafica 
            {
              Object RESULT =null;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object titulo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		grafica_info.putGraficaPie("titulo",titulo.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficaPie",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // graficaPie ::= execGraficas 
            {
              Object RESULT =null;
		
                        GraficaPieInfo grafica_pie = new GraficaPieInfo();

                        grafica_pie.setTitulo((String) grafica_info.getGraficaPie("titulo"));
                        grafica_pie.setValues((List<String>) grafica_info.getGraficaPie("values"));
                        grafica_pie.setLabels((List<String>)grafica_info.getGraficaPie("label"));
                        
                        AlmacenamientoGraficas.listaGraficasPie.add(grafica_pie);
                        GraficaInfo.componentesGraficaPie.clear();
                        GeneradorGraficas.generarTodasLasGraficasPie(AlmacenamientoGraficas.listaGraficasPie);
                        interfaz.appendConsolaText("Grafica Pie generada", true);
                       
                
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficaPie",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // graficaLinea ::= tituloGrafica 
            {
              Object RESULT =null;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object titulo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		grafica_info.putGraficaLinea("titulo",titulo.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficaLinea",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // graficaLinea ::= ejeXGrafica 
            {
              Object RESULT =null;
		int eXleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eXright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object eX = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		grafica_info.putGraficaLinea("ejeX",eX);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficaLinea",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // graficaLinea ::= ejeYGrafica 
            {
              Object RESULT =null;
		int eYleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eYright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object eY = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		grafica_info.putGraficaLinea("ejeY", eY);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficaLinea",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // graficaLinea ::= tituloXGrafica 
            {
              Object RESULT =null;
		int TXleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int TXright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object TX = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		grafica_info.putGraficaLinea("tituloX",TX.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficaLinea",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // graficaLinea ::= tituloYGrafica 
            {
              Object RESULT =null;
		int TYleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int TYright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object TY = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		grafica_info.putGraficaLinea("tituloY",TY.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficaLinea",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // graficaLinea ::= execGraficas 
            {
              Object RESULT =null;
		
                
                        GraficaLineaInfo grafica_linea = new GraficaLineaInfo();

                        grafica_linea.setTitulo((String) grafica_info.getGraficaLinea("titulo"));
                        grafica_linea.setEjeX((List<String>) grafica_info.getGraficaLinea("ejeX"));
                        grafica_linea.setEjeY((List<String>) grafica_info.getGraficaLinea("ejeY"));
                        grafica_linea.setTituloX((String) grafica_info.getGraficaLinea("tituloX"));
                        grafica_linea.setTituloY((String) grafica_info.getGraficaLinea("tituloY"));

                        AlmacenamientoGraficas.listaGraficasLinea.add(grafica_linea);
                        GraficaInfo.componentesGraficaLinea.clear();
                        GeneradorGraficas.generarTodasLasGraficasLinea(AlmacenamientoGraficas.listaGraficasLinea);
                        interfaz.appendConsolaText("Grafica de Linea generada", true);

                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficaLinea",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // graficaHistograma ::= tituloGrafica 
            {
              Object RESULT =null;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object titulo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		grafica_info.putHistograma("titulo",titulo.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficaHistograma",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // graficaHistograma ::= valuesGrafica 
            {
              Object RESULT =null;
		int valuesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valuesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object values = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		grafica_info.putHistograma("values",values);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficaHistograma",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // graficaHistograma ::= execGraficas 
            {
              Object RESULT =null;
		
                        GraficaHistoInfo grafica_histo = new GraficaHistoInfo();
                
                        grafica_histo.setTitulo((String) grafica_info.getHistograma("titulo"));
                        grafica_histo.setValues((List<String>) grafica_info.getHistograma("values"));


                        AlmacenamientoGraficas.listaGraficasHisto.add(grafica_histo);
                        GraficaInfo.componentesHistograma.clear();
                        GeneradorGraficas.generarTodasLasTablasHisto(AlmacenamientoGraficas.listaGraficasHisto);
                        GeneradorGraficas.generarTodasLasGraficasHisto(AlmacenamientoGraficas.listaGraficasHisto);               
                        interfaz.appendConsolaText("Grafica Histograma generada", true);
                
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficaHistograma",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // tituloGrafica ::= TITULO DOS_PUNTOS DOS_PUNTOS CHAR1 A_CORCHETE C_CORCHETE S_IGUAL variablesGraficas END PUNTO_COMA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        RESULT = val;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tituloGrafica",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$0 ::= 
            {
              Object RESULT =null;
impresionC.lista_graficas.clear();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ejeXGrafica ::= E_X DOS_PUNTOS DOS_PUNTOS CHAR1 A_CORCHETE C_CORCHETE S_IGUAL NT$0 operacionesGraficas1 END PUNTO_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		      
        Collections.reverse(impresionC.lista_graficas);
        RESULT = new LinkedList<>(impresionC.lista_graficas);
        impresionC.lista_graficas.clear();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ejeXGrafica",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$1 ::= 
            {
              Object RESULT =null;
impresionC.lista_graficas.clear();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ejeYGrafica ::= E_Y DOS_PUNTOS DOS_PUNTOS DOUBLE1 S_IGUAL NT$1 operacionesGraficas1 END PUNTO_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
        Collections.reverse(impresionC.lista_graficas);
        RESULT = new LinkedList<>(impresionC.lista_graficas);
        impresionC.lista_graficas.clear();        

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ejeYGrafica",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // tituloXGrafica ::= T_X DOS_PUNTOS DOS_PUNTOS CHAR1 A_CORCHETE C_CORCHETE S_IGUAL variablesGraficas END PUNTO_COMA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        RESULT = val;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tituloXGrafica",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // tituloYGrafica ::= T_Y DOS_PUNTOS DOS_PUNTOS CHAR1 A_CORCHETE C_CORCHETE S_IGUAL variablesGraficas END PUNTO_COMA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        RESULT = val;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tituloYGrafica",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$2 ::= 
            {
              Object RESULT =null;
impresionC.lista_graficas.clear();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // labelGrafica ::= LABEL DOS_PUNTOS DOS_PUNTOS CHAR1 A_CORCHETE C_CORCHETE S_IGUAL NT$2 operacionesGraficas1 END PUNTO_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
        Collections.reverse(impresionC.lista_graficas);
        RESULT = new LinkedList<>(impresionC.lista_graficas);
        impresionC.lista_graficas.clear();  

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("labelGrafica",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NT$3 ::= 
            {
              Object RESULT =null;
impresionC.lista_graficas.clear();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // valuesGrafica ::= VALUES DOS_PUNTOS DOS_PUNTOS DOUBLE1 S_IGUAL NT$3 operacionesGraficas1 END PUNTO_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
        Collections.reverse(impresionC.lista_graficas);
        RESULT = new LinkedList<>(impresionC.lista_graficas);
        impresionC.lista_graficas.clear();  

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valuesGrafica",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // execGraficas ::= EXEC tiposGraficas END PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("execGraficas",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // tiposGraficas ::= GraphBar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tiposGraficas",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // tiposGraficas ::= GraphPie 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tiposGraficas",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // tiposGraficas ::= GraphLine 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tiposGraficas",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // tiposGraficas ::= HISTOGRAM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tiposGraficas",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // variablesGraficas ::= CADENA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.substring(1, val.length() - 1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variablesGraficas",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // variablesGraficas ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = variables.getVariable(val);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variablesGraficas",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // operacionesGraficas ::= operacionAritmetica COMA operacionesGraficas 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT=impresionC.lista_graficas.add(c.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionesGraficas",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // operacionesGraficas ::= operacionAritmetica 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=impresionC.lista_graficas.add(c.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionesGraficas",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // operacionesGraficas1 ::= A_CORCHETE operacionesGraficas C_CORCHETE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionesGraficas1",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // operacionesGraficas1 ::= ID_ARREGLO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		LinkedList<Object> temp = (LinkedList<Object>) variables.getVariable(val);
                                for (Object obj : temp) {
                                impresionC.lista_graficas.add(obj);
                                }
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionesGraficas1",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
