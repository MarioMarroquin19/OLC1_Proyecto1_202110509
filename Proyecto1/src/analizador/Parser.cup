// ------------  Paquetes e importaciones ------------
package analizador;

import java_cup.runtime.*;
import java.util.LinkedList;
import java.util.Collections;
import funciones.ImpresionConsola;
import funciones.Variables;
import funciones.OperacionesAritmeticas;


//------> Codigo para el parser
//------> Declaracion de variables, funciones y funciones de error


parser code 
{:

        public String resultado = ""; //Variable para mostrar en consola
        //public static LinkedList<Object> instrucciones; //Lista con instrucciones a ejecutar
        ImpresionConsola impresionC = new ImpresionConsola();
        Variables variables = new Variables();
        OperacionesAritmeticas operacionesArit = new OperacionesAritmeticas();


    public void syntax_error(Symbol s)
    {
            System.err.println("Identificador "+ s.value + " no reconocido. Se ha recuperado del error." );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            System.err.println("Identificador " +s.value + " no reconocido.");
    }

:}


//------> Codigo para las acciones gramaticales (no tocar)
action code
{:  :}


//------> Declaración de terminales

terminal String PROGRAM, END, CHAR1, DOUBLE1, VAR, ARR;
terminal String SUM, RES, MUL, DIV, MOD;
terminal String MEDIA, MEDIANA, MODA, VARIANZA, MAX, MIN;
terminal String CONSOLE;
terminal String GraphPie, GraphBar, GraphLine, HISTOGRAM;
terminal String TITULO, E_X, E_Y, T_X, T_Y, EXEC, LABEL, VALUES;
terminal String PRINT, COLUMN;
terminal String DOS_PUNTOS, PUNTO_COMA, COMA, PUNTO, S_EXCLAMACION, MAYOR_Q;
terminal String MENOR_Q, A_CORCHETE, C_CORCHETE, A_LLAVE, C_LLAVE, GUION;
terminal String ARROBA, COMILLA, A_PARENTESIS, C_PARENTESIS, S_IGUAL;
terminal String ENTERO, DECIMAL, CADENA, ID, ID_ARREGLO;

//------> Declaración de no terminales
non terminal inicio;
non terminal instruccion;
non terminal expresiones;

non terminal DeclararVariables;
non terminal tipo;
non terminal expresionTipoVariables;
non terminal operacionesAritmeticas;
non terminal operacionAritmetica;
non terminal operacionesEstad;
non terminal operacionEstadistica;

non terminal DeclararArreglos;
non terminal expresionesTipoArreglos;
non terminal OperacionesArreglos;

non terminal Impresion_consola;
non terminal salida;
non terminal elementoImpresion;

non terminal Impresion_graficas;




// ------------  GRAMATICA  ------------

start with inicio; //Simbolo inicial


inicio ::= PROGRAM 
           instruccion
           END PROGRAM
;

instruccion ::= expresiones
               | instruccion expresiones
;

expresiones ::= DeclararVariables
                | DeclararArreglos
                | Impresion_consola
                | Impresion_graficas
;


//DECLARACION DE VARIABLES

DeclararVariables ::= VAR DOS_PUNTOS tipo DOS_PUNTOS DOS_PUNTOS ID:id MENOR_Q GUION expresionTipoVariables:exp END PUNTO_COMA {:
variables.addVariable(id,exp.toString());:} 
;

tipo::=  CHAR1 A_CORCHETE C_CORCHETE
       | DOUBLE1
;


// Reglas para tipos de expresiones
expresionTipoVariables ::= operacionAritmetica:val {: RESULT = val; :}
;

operacionAritmetica ::= SUM A_PARENTESIS operacionAritmetica:a COMA operacionAritmetica:b C_PARENTESIS {: RESULT = operacionesArit.SUM(a.toString(),b.toString());:}
                      | RES A_PARENTESIS operacionAritmetica:a COMA operacionAritmetica:b C_PARENTESIS {: RESULT = operacionesArit.RES(a.toString(),b.toString());:}
                      | MUL A_PARENTESIS operacionAritmetica:a COMA operacionAritmetica:b C_PARENTESIS {: RESULT = operacionesArit.MUL(a.toString(),b.toString());:}
                      | DIV A_PARENTESIS operacionAritmetica:a COMA operacionAritmetica:b C_PARENTESIS {: RESULT = operacionesArit.DIV(a.toString(),b.toString());:}
                      | MOD A_PARENTESIS operacionAritmetica:a COMA operacionAritmetica:b C_PARENTESIS {: RESULT = operacionesArit.MOD(a.toString(),b.toString());:}
                      | ENTERO:val {: RESULT = val;:}
                      | DECIMAL:val {: RESULT = val;:}
                      | ID: val {:RESULT = variables.getVariable(val);:}
                      | CADENA:val {: RESULT = val.substring(1, val.length() - 1); :}
                      

                       | MEDIA A_PARENTESIS A_CORCHETE operacionesEstad C_CORCHETE C_PARENTESIS {:
                        RESULT = operacionesArit.Media(operacionesArit.listaEstadistica);operacionesArit.listaEstadistica.clear();:}

                        |MEDIANA A_PARENTESIS A_CORCHETE operacionesEstad C_CORCHETE C_PARENTESIS {:
                        RESULT = operacionesArit.Mediana(operacionesArit.listaEstadistica);operacionesArit.listaEstadistica.clear();:}

                        |MODA A_PARENTESIS A_CORCHETE operacionesEstad C_CORCHETE C_PARENTESIS {:
                        RESULT = operacionesArit.Moda(operacionesArit.listaEstadistica);operacionesArit.listaEstadistica.clear();:}

                        |VARIANZA A_PARENTESIS A_CORCHETE operacionesEstad C_CORCHETE C_PARENTESIS{:
                        RESULT = operacionesArit.Varianza(operacionesArit.listaEstadistica);operacionesArit.listaEstadistica.clear();:}

                        |MAX A_PARENTESIS A_CORCHETE operacionesEstad C_CORCHETE C_PARENTESIS {:
                        RESULT = operacionesArit.Maximo(operacionesArit.listaEstadistica);operacionesArit.listaEstadistica.clear();:}

                        |MIN A_PARENTESIS A_CORCHETE operacionesEstad C_CORCHETE C_PARENTESIS {:
                        RESULT = operacionesArit.Minimo(operacionesArit.listaEstadistica);operacionesArit.listaEstadistica.clear();:}

                        |MEDIA A_PARENTESIS ID_ARREGLO:val C_PARENTESIS 
                        |MEDIANA A_PARENTESIS ID_ARREGLO:val C_PARENTESIS 
                        |MODA A_PARENTESIS ID_ARREGLO:val C_PARENTESIS 
                        |VARIANZA A_PARENTESIS ID_ARREGLO:val C_PARENTESIS 
                        |MAX A_PARENTESIS ID_ARREGLO:val C_PARENTESIS 
                        |MIN A_PARENTESIS ID_ARREGLO:val C_PARENTESIS 
;

operacionesEstad ::= operacionAritmetica:a COMA operacionesEstad {:operacionesArit.listaEstadistica.add(a.toString());:}
                    | operacionAritmetica:a {:operacionesArit.listaEstadistica.add(a.toString());:}
;

//DECLARACION DE ARREGLOS

DeclararArreglos ::= ARR DOS_PUNTOS tipo DOS_PUNTOS DOS_PUNTOS ID_ARREGLO:id MENOR_Q GUION A_CORCHETE OperacionesArreglos:exp C_CORCHETE END PUNTO_COMA {:
                    String resultado = String.join("",operacionesArit.ListaArreglos);variables.addVariable(id,resultado);operacionesArit.ListaArreglos.clear();:} 
;

OperacionesArreglos ::= operacionAritmetica:a COMA OperacionesArreglos {:operacionesArit.ListaArreglos.add(a.toString());:}
                    | operacionAritmetica:a {:operacionesArit.ListaArreglos.add(a.toString());:}
;



//IMPRESION EN CONSOLA (PRINT)
Impresion_consola ::= CONSOLE DOS_PUNTOS DOS_PUNTOS PRINT S_IGUAL elementoImpresion END PUNTO_COMA  {: 
    Collections.reverse(impresionC.lista_salida);
    for (int i = 0; i < impresionC.lista_salida.size(); i++) { 
            System.out.print(impresionC.lista_salida.get(i)); 
            if (i < impresionC.lista_salida.size() - 1) { 
                    System.out.print(","); 
                    } 
            }        
            System.out.println(); 
            impresionC.lista_salida.clear(); :}
;

salida ::= elementoImpresion
         | salida COMA elementoImpresion 
;

elementoImpresion ::= ID_ARREGLO:val      {:impresionC.lista_salida.add(variables.getVariable(val));:}
                    |operacionAritmetica:a {:impresionC.lista_salida.add(a.toString());:}
                    |operacionAritmetica:a COMA elementoImpresion {:impresionC.lista_salida.add(a.toString());:}
;