// ------------  Paquetes e importaciones ------------
package analizador;

import java_cup.runtime.*;
import java.util.LinkedList;
import funciones.ImpresionConsola;


//------> Codigo para el parser
//------> Declaracion de variables, funciones y funciones de error







parser code 
{:
    public String resultado = ""; //Variable para mostrar en consola
    //public static LinkedList<Object> instrucciones; //Lista con instrucciones a ejecutar


    public void syntax_error(Symbol s)
    {
            System.err.println("Identificador "+ s.value + " no reconocido. Se ha recuperado del error." );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            System.err.println("Identificador " +s.value + " no reconocido.");
    }

:}


//------> Codigo para las acciones gramaticales (no tocar)
action code
{:  :}


//------> Declaración de terminales

terminal String PROGRAM, END, CHAR1, DOUBLE1, VAR, ARR;
terminal String SUM, RES, MUL, DIV, MOD;
terminal String MEDIA, MEDIANA, MODA, VARIANZA, MAX, MIN;
terminal String CONSOLE;
terminal String GraphPie, GraphBar, GraphLine, HISTOGRAM;
terminal String TITULO, E_X, E_Y, T_X, T_Y, EXEC, LABEL, VALUES;
terminal String PRINT, COLUMN;
terminal String DOS_PUNTOS, PUNTO_COMA, COMA, PUNTO, S_ADMIRACION, MAYOR_Q;
terminal String MENOR_Q, A_CORCHETE, C_CORCHETE, A_LLAVE, C_LLAVE, GUION;
terminal String ARROBA, COMILLA, A_PARENTESIS, C_PARENTESIS, S_IGUAL;
terminal String ENTERO, DECIMAL, CADENA, ID, ID_ARREGLO;

//------> Declaración de no terminales
non terminal inicio;
non terminal instruccion;
non terminal expresiones;
non terminal Impresion_consola;
non terminal salida;
non terminal elemento;


// ------------  GRAMATICA  ------------

start with inicio; //Simbolo inicial


inicio ::= PROGRAM 
           instruccion
           END PROGRAM
;

instruccion ::= expresiones
               | instruccion expresiones
;

expresiones ::= Impresion_consola
;

Impresion_consola ::= CONSOLE DOS_PUNTOS DOS_PUNTOS PRINT S_IGUAL salida END PUNTO_COMA  {: ImpresionConsola funciones = new ImpresionConsola(); for (int i = 0; i < funciones.lista_salida.size(); i++) { System.out.print(funciones.lista_salida.get(i)); if (i < funciones.lista_salida.size() - 1) { System.out.print(","); } } System.out.println(); funciones.lista_salida.clear(); :}
;

salida ::= elemento
         | salida COMA elemento 
;

elemento ::= CADENA:val  {:funciones.ImpresionConsola.lista_salida.add(val.substring(1, val.length() - 1));:}
           | ENTERO:val  {:funciones.ImpresionConsola.lista_salida.add(val);:}
           | DECIMAL:val {:funciones.ImpresionConsola.lista_salida.add(val);:}
;