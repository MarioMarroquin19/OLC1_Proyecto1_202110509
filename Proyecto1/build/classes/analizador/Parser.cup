// ------------  Paquetes e importaciones ------------
package analizador;

import java_cup.runtime.*;
import java.util.LinkedList;
import funciones.ImpresionConsola;
import funciones.Variables;
import funciones.OperacionesAritmeticas;

//------> Codigo para el parser
//------> Declaracion de variables, funciones y funciones de error


parser code 
{:

        public String resultado = ""; //Variable para mostrar en consola
        //public static LinkedList<Object> instrucciones; //Lista con instrucciones a ejecutar
        ImpresionConsola impresionC = new ImpresionConsola();
        Variables variables = new Variables();
        OperacionesAritmeticas operacionesArit = new OperacionesAritmeticas();


    public void syntax_error(Symbol s)
    {
            System.err.println("Identificador "+ s.value + " no reconocido. Se ha recuperado del error." );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            System.err.println("Identificador " +s.value + " no reconocido.");
    }

:}


//------> Codigo para las acciones gramaticales (no tocar)
action code
{:  :}


//------> Declaración de terminales

terminal String PROGRAM, END, CHAR1, DOUBLE1, VAR, ARR;
terminal String SUM, RES, MUL, DIV, MOD;
terminal String MEDIA, MEDIANA, MODA, VARIANZA, MAX, MIN;
terminal String CONSOLE;
terminal String GraphPie, GraphBar, GraphLine, HISTOGRAM;
terminal String TITULO, E_X, E_Y, T_X, T_Y, EXEC, LABEL, VALUES;
terminal String PRINT, COLUMN;
terminal String DOS_PUNTOS, PUNTO_COMA, COMA, PUNTO, S_EXCLAMACION, MAYOR_Q;
terminal String MENOR_Q, A_CORCHETE, C_CORCHETE, A_LLAVE, C_LLAVE, GUION;
terminal String ARROBA, COMILLA, A_PARENTESIS, C_PARENTESIS, S_IGUAL;
terminal String ENTERO, DECIMAL, CADENA, ID, ID_ARREGLO;

//------> Declaración de no terminales
non terminal inicio;
non terminal instruccion;
non terminal expresiones;

non terminal DeclararVariables;
non terminal tipo;
non terminal expresionTipoVariables;
non terminal operacionesAritmeticas;
non terminal operacionAritmetica;
non terminal numeros;
non terminal operacionEstadistica;

non terminal DeclararArreglos;
non terminal expresionTipoArreglos;
non terminal elementoArreglo;

non terminal Impresion_consola;
non terminal salida;
non terminal elementoImpresion;

non terminal Impresion_graficas;




// ------------  GRAMATICA  ------------

start with inicio; //Simbolo inicial


inicio ::= PROGRAM 
           instruccion
           END PROGRAM
;

instruccion ::= expresiones
               | instruccion expresiones
;

expresiones ::= DeclararVariables
                | DeclararArreglos
                | Impresion_consola
                | Impresion_graficas
;


//DECLARACION DE VARIABLES

DeclararVariables ::= VAR DOS_PUNTOS tipo DOS_PUNTOS DOS_PUNTOS ID:id MENOR_Q GUION expresionTipoVariables:exp END PUNTO_COMA {:
variables.addVariable(id,exp.toString());:} 
;

tipo::=  CHAR1 A_CORCHETE C_CORCHETE
       | DOUBLE1
;


// Reglas para tipos de expresiones
expresionTipoVariables ::= CADENA:val {: RESULT = val.substring(1, val.length() - 1); :}
                         | ENTERO:val {: RESULT = val; :}
                         | DECIMAL:val {: RESULT = val; :}
                         | operacionesAritmeticas:val {: RESULT=val; :}
;

operacionesAritmeticas ::= SUM operacionAritmetica:exp {: RESULT = operacionesArit.operaciones.add(exp.toString()); :}
                         | RES operacionAritmetica
                         | MUL operacionAritmetica
                         | DIV operacionAritmetica
                         | MOD operacionAritmetica
                         | MEDIA operacionEstadistica
                         | MEDIANA operacionEstadistica
                         | MODA operacionEstadistica
                         | VARIANZA operacionEstadistica
                         | MAX operacionEstadistica
                         | MIN  operacionEstadistica                      
;

operacionAritmetica ::= A_PARENTESIS numeros:val C_PARENTESIS {: RESULT = val; System.out.println(val);:}
                      | A_PARENTESIS operacionesAritmeticas C_PARENTESIS
;

numeros ::= ENTERO:a COMA ENTERO:b {: RESULT = operacionesArit.Suma(a.toString(),b.toString());:}
          | DECIMAL COMA DECIMAL
          | operacionesAritmeticas COMA numeros
          | ENTERO
          | DECIMAL
;

operacionEstadistica ::= A_PARENTESIS A_CORCHETE numeros C_CORCHETE C_PARENTESIS
                       | ID_ARREGLO
;


//DECLARACION DE ARREGLOS

DeclararArreglos ::= ARR DOS_PUNTOS tipo DOS_PUNTOS DOS_PUNTOS ID_ARREGLO MENOR_Q GUION A_CORCHETE expresionTipoArreglos C_CORCHETE END PUNTO_COMA 
;

expresionTipoArreglos ::= elementoArreglo
                        | expresionTipoArreglos COMA elementoArreglo
;

elementoArreglo ::=  CADENA
                   | ENTERO
                   | DECIMAL
                   | operacionesAritmeticas
;



//IMPRESION EN CONSOLA (PRINT)
Impresion_consola ::= CONSOLE DOS_PUNTOS DOS_PUNTOS PRINT S_IGUAL salida END PUNTO_COMA  {: 
    for (int i = 0; i < impresionC.lista_salida.size(); i++) { 
            System.out.print(impresionC.lista_salida.get(i)); 
            if (i < impresionC.lista_salida.size() - 1) { 
                    System.out.print(","); 
                    } 
            }        
            System.out.println(); 
            impresionC.lista_salida.clear(); :}
;

salida ::= elementoImpresion
         | salida COMA elementoImpresion 
;

elementoImpresion ::= CADENA:val  {:impresionC.lista_salida.add(val.substring(1, val.length() - 1));:}
                    | ENTERO:val  {:impresionC.lista_salida.add(val);:}
                    | DECIMAL:val {:impresionC.lista_salida.add(val);:}
                    | ID:val      {:impresionC.lista_salida.add(variables.getVariable(val));:}
;