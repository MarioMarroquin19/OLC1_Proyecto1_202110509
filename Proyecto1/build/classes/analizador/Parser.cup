// ------------  Paquetes e importaciones ------------
package analizador;

import java_cup.runtime.*;
import java.util.LinkedList;
import java.util.Collections;
import funciones.ImpresionConsola;
import funciones.Variables;
import funciones.OperacionesAritmeticas;
import java.util.ArrayList;


//------> Codigo para el parser
//------> Declaracion de variables, funciones y funciones de error


parser code 
{:

        public String resultado = ""; //Variable para mostrar en consola

        //public static LinkedList<Object> instrucciones; //Lista con instrucciones a ejecutar
        ImpresionConsola impresionC = new ImpresionConsola();
        Variables variables = new Variables();
        OperacionesAritmeticas operacionesArit = new OperacionesAritmeticas();


    public void syntax_error(Symbol s)
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
    }

:}


//------> Codigo para las acciones gramaticales (no tocar)
action code
{:  :}


//------> Declaración de terminales

terminal String PROGRAM, END, CHAR1, DOUBLE1, VAR, ARR;
terminal String SUM, RES, MUL, DIV, MOD;
terminal String MEDIA, MEDIANA, MODA, VARIANZA, MAX, MIN;
terminal String CONSOLE;
terminal String GraphPie, GraphBar, GraphLine, HISTOGRAM;
terminal String TITULO, E_X, E_Y, T_X, T_Y, EXEC, LABEL, VALUES;
terminal String PRINT, COLUMNA;
terminal String DOS_PUNTOS, PUNTO_COMA, COMA, PUNTO, S_EXCLAMACION, MAYOR_Q;
terminal String MENOR_Q, A_CORCHETE, C_CORCHETE, A_LLAVE, C_LLAVE, GUION;
terminal String ARROBA, COMILLA, A_PARENTESIS, C_PARENTESIS, S_IGUAL;
terminal String ENTERO, DECIMAL, CADENA, ID, ID_ARREGLO;

//------> Declaración de no terminales
non terminal inicio;
non terminal instruccion;
non terminal expresiones;

non terminal DeclararVariables;
non terminal tipo;
non terminal expresionTipoVariables;
non terminal operacionesAritmeticas;
non terminal operacionAritmetica;
non terminal operacionesEstad;
non terminal operacionEstadistica;

non terminal DeclararArreglos;
non terminal expresionesTipoArreglos;
non terminal OperacionesArreglos;

non terminal imprimirTipos;
non terminal tiposImpresion;
non terminal elementoImpresion;
non terminal titulo_arreglo;
non terminal arreglo_contenido;
non terminal OperacionImpresionArreglos;

non terminal Impresion_graficas;
non terminal  graficaBarras;
non terminal graficaPie;
non terminal graficaLinea;
non terminal graficaHistograma;


// ------------  GRAMATICA  ------------

start with inicio; //Simbolo inicial


inicio ::= PROGRAM 
           instruccion
           END PROGRAM
;

instruccion ::= expresiones
               | instruccion expresiones
;

expresiones ::= DeclararVariables
                | DeclararArreglos
                | imprimirTipos
                | Impresion_graficas
                | error PUNTO_COMA
;


//DECLARACION DE VARIABLES

DeclararVariables ::= VAR DOS_PUNTOS tipo DOS_PUNTOS DOS_PUNTOS ID:id MENOR_Q GUION expresionTipoVariables:expe END PUNTO_COMA {:
variables.addVariable(id,expe);:} 
;

tipo::=  CHAR1 A_CORCHETE C_CORCHETE
       | DOUBLE1
;


// Reglas para tipos de expresiones
expresionTipoVariables ::= operacionAritmetica:val {: RESULT = val; :}
;

operacionAritmetica ::= SUM A_PARENTESIS operacionAritmetica:a COMA operacionAritmetica:b C_PARENTESIS {: RESULT = operacionesArit.SUM(a.toString(),b.toString());:}
                      | RES A_PARENTESIS operacionAritmetica:a COMA operacionAritmetica:b C_PARENTESIS {: RESULT = operacionesArit.RES(a.toString(),b.toString());:}
                      | MUL A_PARENTESIS operacionAritmetica:a COMA operacionAritmetica:b C_PARENTESIS {: RESULT = operacionesArit.MUL(a.toString(),b.toString());:}
                      | DIV A_PARENTESIS operacionAritmetica:a COMA operacionAritmetica:b C_PARENTESIS {: RESULT = operacionesArit.DIV(a.toString(),b.toString());:}
                      | MOD A_PARENTESIS operacionAritmetica:a COMA operacionAritmetica:b C_PARENTESIS {: RESULT = operacionesArit.MOD(a.toString(),b.toString());:}
                      | ENTERO:val {: RESULT = val;:}
                      | DECIMAL:val {: RESULT = val;:}
                      | ID: val {:RESULT = variables.getVariable(val);:}
                      | CADENA:val {: RESULT = val.substring(1, val.length() - 1); :}
                      

                       | MEDIA A_PARENTESIS A_CORCHETE operacionesEstad C_CORCHETE C_PARENTESIS {:
                        RESULT = operacionesArit.Media(operacionesArit.listaEstadistica);operacionesArit.listaEstadistica.clear();:}

                        |MEDIANA A_PARENTESIS A_CORCHETE operacionesEstad C_CORCHETE C_PARENTESIS {:
                        RESULT = operacionesArit.Mediana(operacionesArit.listaEstadistica);operacionesArit.listaEstadistica.clear();:}

                        |MODA A_PARENTESIS A_CORCHETE operacionesEstad C_CORCHETE C_PARENTESIS {:
                        RESULT = operacionesArit.Moda(operacionesArit.listaEstadistica);operacionesArit.listaEstadistica.clear();:}

                        |VARIANZA A_PARENTESIS A_CORCHETE operacionesEstad C_CORCHETE C_PARENTESIS{:
                        RESULT = operacionesArit.Varianza(operacionesArit.listaEstadistica);operacionesArit.listaEstadistica.clear();:}

                        |MAX A_PARENTESIS A_CORCHETE operacionesEstad C_CORCHETE C_PARENTESIS {:
                        RESULT = operacionesArit.Maximo(operacionesArit.listaEstadistica);operacionesArit.listaEstadistica.clear();:}

                        |MIN A_PARENTESIS A_CORCHETE operacionesEstad C_CORCHETE C_PARENTESIS {:
                        RESULT = operacionesArit.Minimo(operacionesArit.listaEstadistica);operacionesArit.listaEstadistica.clear();:}

                        |MEDIA A_PARENTESIS ID_ARREGLO:val C_PARENTESIS {:

                                Object obj = variables.getVariable(val);
                                if (obj instanceof LinkedList) {
                                LinkedList<Object> lista = (LinkedList<Object>) obj;
                                RESULT = operacionesArit.Media(lista);
                                } else {
                                // Manejar el caso en el que el objeto no es un LinkedList
                                }
                        :}

                        |MEDIANA A_PARENTESIS ID_ARREGLO:val C_PARENTESIS {:

                                Object obj = variables.getVariable(val);
                                if (obj instanceof LinkedList) {
                                LinkedList<Object> lista = (LinkedList<Object>) obj;
                                RESULT = operacionesArit.Mediana(lista);
                                } else {
                                // Manejar el caso en el que el objeto no es un LinkedList
                                }
                        :}

                        |MODA A_PARENTESIS ID_ARREGLO:val C_PARENTESIS {:

                                Object obj = variables.getVariable(val);
                                if (obj instanceof LinkedList) {
                                LinkedList<Object> lista = (LinkedList<Object>) obj;
                                RESULT = operacionesArit.Moda(lista);
                                } else {
                                // Manejar el caso en el que el objeto no es un LinkedList
                                }
                        :}

                        |VARIANZA A_PARENTESIS ID_ARREGLO:val C_PARENTESIS {:

                                Object obj = variables.getVariable(val);
                                if (obj instanceof LinkedList) {
                                LinkedList<Object> lista = (LinkedList<Object>) obj;
                                RESULT = operacionesArit.Varianza(lista);
                                } else {
                                // Manejar el caso en el que el objeto no es un LinkedList
                                }
                        :}

                        |MAX A_PARENTESIS ID_ARREGLO:val C_PARENTESIS {:

                                Object obj = variables.getVariable(val);
                                if (obj instanceof LinkedList) {
                                LinkedList<Object> lista = (LinkedList<Object>) obj;
                                RESULT = operacionesArit.Maximo(lista);
                                } else {
                                // Manejar el caso en el que el objeto no es un LinkedList
                                }
                        :}

                        |MIN A_PARENTESIS ID_ARREGLO:val C_PARENTESIS {:

                                Object obj = variables.getVariable(val);
                                if (obj instanceof LinkedList) {
                                LinkedList<Object> lista = (LinkedList<Object>) obj;
                                RESULT = operacionesArit.Minimo(lista);
                                } else {
                                // Manejar el caso en el que el objeto no es un LinkedList
                                }
                        :}
;

operacionesEstad ::= operacionAritmetica:b COMA operacionesEstad {:operacionesArit.listaEstadistica.add(b.toString());:}
                    | operacionAritmetica:c {:operacionesArit.listaEstadistica.add(c.toString());:}
;




//DECLARACION DE ARREGLOS

DeclararArreglos ::= ARR DOS_PUNTOS tipo DOS_PUNTOS DOS_PUNTOS ID_ARREGLO:id MENOR_Q GUION A_CORCHETE OperacionesArreglos:exp C_CORCHETE END PUNTO_COMA {:
                        variables.addVariable(id,new LinkedList<Object>(operacionesArit.ListaArreglos)); operacionesArit.ListaArreglos.clear(); :} 
;

OperacionesArreglos ::= operacionAritmetica:c COMA OperacionesArreglos {:RESULT=operacionesArit.ListaArreglos.add(c.toString());:}
                    | operacionAritmetica:b {:RESULT= operacionesArit.ListaArreglos.add(b.toString());:}
;




//IMPRESIONES EN CONSOLA

imprimirTipos ::= CONSOLE DOS_PUNTOS DOS_PUNTOS tiposImpresion END PUNTO_COMA
;

tiposImpresion ::=  PRINT S_IGUAL elementoImpresion {: 
                        Collections.reverse(impresionC.lista_salida);
                        for (int i = 0; i < impresionC.lista_salida.size(); i++) { 
                                System.out.print(impresionC.lista_salida.get(i)); 
                                if (i < impresionC.lista_salida.size() - 1) { 
                                        System.out.print(", "); 
                                        } 
                                }        
                                System.out.println(); 
                                impresionC.lista_salida.clear(); :}

                |COLUMNA S_IGUAL titulo_arreglo:titulo GUION MAYOR_Q arreglo_contenido{:
                        System.out.println("------------------------");
                        System.out.println(titulo);
                        System.out.println("------------------------");
                        Collections.reverse(impresionC.lista_columnas);
                        for (int i = 0; i < impresionC.lista_columnas.size(); i++){
                                System.out.println(impresionC.lista_columnas.get(i));
                                if(i<impresionC.lista_columnas.size()-1){
                                    //System.out.println();    
                                }
                        }
                        System.out.println(); 
                        impresionC.lista_columnas.clear();:}
;



elementoImpresion ::= ID_ARREGLO:val {:impresionC.lista_salida.add(variables.getVariable(val));:}
                    |operacionAritmetica:a {:impresionC.lista_salida.add(a.toString());:}
                    |operacionAritmetica:a COMA elementoImpresion {:impresionC.lista_salida.add(a.toString());:}
;


titulo_arreglo::= CADENA:val {: RESULT = val.substring(1, val.length() - 1); :}
                | ID: val {:RESULT = variables.getVariable(val);:}

;

arreglo_contenido::= A_CORCHETE OperacionImpresionArreglos C_CORCHETE 
                | ID_ARREGLO:val {:LinkedList<Object> temp = (LinkedList<Object>) variables.getVariable(val);
                                for (Object obj : temp) {
                                impresionC.lista_columnas.add(obj);
                                }:}
;

OperacionImpresionArreglos ::=  operacionAritmetica:c COMA OperacionImpresionArreglos {:RESULT=impresionC.lista_columnas.add(c.toString());:}
                                | operacionAritmetica:b {:RESULT=impresionC.lista_columnas.add(b.toString());:}
;


//IMPRESIONES DE GRAFICAS

Impresion_graficas ::=   GraphBar A_PARENTESIS graficaBarras C_PARENTESIS END PUNTO_COMA
                        |GraphPie A_PARENTESIS graficaPie C_PARENTESIS END PUNTO_COMA
                        |GraphLine A_PARENTESIS graficaLinea C_PARENTESIS END PUNTO_COMA
                        |HISTOGRAM A_PARENTESIS graficaHistograma C_PARENTESIS END PUNTO_COMA
;


graficaBarras ::= 
;

graficaPie ::=
;

graficaLinea ::=
;

graficaHistograma ::=
;