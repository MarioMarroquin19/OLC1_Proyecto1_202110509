// ------------  Paquetes e importaciones ------------
package analizador;

import java_cup.runtime.*;
import java.util.LinkedList;
import java.util.Collections;
import funciones.ImpresionConsola;
import funciones.Variables;
import funciones.OperacionesAritmeticas;
import Graficas.GraficaInfo;
import Graficas.GraficaBarrasInfo;
import Graficas.GraficaHistoInfo;
import Graficas.GraficaLineaInfo;
import Graficas.GraficaPieInfo;
import Graficas.AlmacenamientoGraficas;
import Graficas.GeneradorGraficas;
import Graficas.GraficaInfo;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Arrays;
import java.util.LinkedList;
import main.Interfaz;

//------> Codigo para el parser
//------> Declaracion de variables, funciones y funciones de error


parser code 
{:

    public String resultado = ""; //Variable para mostrar en consola

    ImpresionConsola impresionC = new ImpresionConsola();
    Variables variables = new Variables();
    OperacionesAritmeticas operacionesArit = new OperacionesAritmeticas();

    GraficaInfo grafica_info = new GraficaInfo();

    private Interfaz interfaz;
    
    public void setInterfaz(Interfaz interfaz) {
            this.interfaz = interfaz;
        }

    public void syntax_error(Symbol s)
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
    }

:}


//------> Codigo para las acciones gramaticales (no tocar)
action code
{:  :}


//------> Declaración de terminales

terminal String PROGRAM, END, CHAR1, DOUBLE1, VAR, ARR;
terminal String SUM, RES, MUL, DIV, MOD;
terminal String MEDIA, MEDIANA, MODA, VARIANZA, MAX, MIN;
terminal String CONSOLE;
terminal String GraphPie, GraphBar, GraphLine, HISTOGRAM;
terminal String TITULO, E_X, E_Y, T_X, T_Y, EXEC, LABEL, VALUES;
terminal String PRINT, COLUMNA;
terminal String DOS_PUNTOS, PUNTO_COMA, COMA, PUNTO, S_EXCLAMACION, MAYOR_Q;
terminal String MENOR_Q, A_CORCHETE, C_CORCHETE, A_LLAVE, C_LLAVE, GUION;
terminal String ARROBA, COMILLA, A_PARENTESIS, C_PARENTESIS, S_IGUAL;
terminal String ENTERO, DECIMAL, CADENA, ID, ID_ARREGLO;

//------> Declaración de no terminales
non terminal inicio;
non terminal instruccion;
non terminal expresiones;

non terminal DeclararVariables;
non terminal tipo;
non terminal expresionTipoVariables;
non terminal operacionesAritmeticas;
non terminal operacionAritmetica;
non terminal operacionesEstad;
non terminal operacionEstadistica;

non terminal DeclararArreglos;
non terminal expresionesTipoArreglos;
non terminal OperacionesArreglos;

non terminal imprimirTipos;
non terminal tiposImpresion;
non terminal elementoImpresion;
non terminal titulo_arreglo;
non terminal arreglo_contenido;
non terminal OperacionImpresionArreglos;

non terminal Impresion_graficas;
non terminal graficaBarras;
non terminal graficaPie;
non terminal graficaLinea;
non terminal graficaHistograma;

//parámetros de las graficas
non terminal tituloGrafica;
non terminal ejeXGrafica;
non terminal ejeYGrafica;
non terminal tituloXGrafica;
non terminal tituloYGrafica;
non terminal labelGrafica;
non terminal valuesGrafica;
non terminal execGraficas;
non terminal operacionesGraficas;
non terminal variablesGraficas;
non terminal tiposGraficas;
non terminal barras;
non terminal pie;
non terminal linea;
non terminal histograma;
non terminal operacionesGraficas1;



// ------------  GRAMATICA  ------------

start with inicio; //Simbolo inicial


inicio ::= PROGRAM 
           instruccion
           END PROGRAM
;

instruccion ::= expresiones
               | instruccion expresiones
;

expresiones ::= DeclararVariables
                | DeclararArreglos
                | imprimirTipos
                | Impresion_graficas
                | error PUNTO_COMA
;


//DECLARACION DE VARIABLES

DeclararVariables ::= VAR DOS_PUNTOS tipo DOS_PUNTOS DOS_PUNTOS ID:id MENOR_Q GUION expresionTipoVariables:expe END PUNTO_COMA {:
variables.addVariable(id,expe);:} 
;

tipo::=  CHAR1 A_CORCHETE C_CORCHETE
       | DOUBLE1
;


// Reglas para tipos de expresiones
expresionTipoVariables ::= operacionAritmetica:val {: RESULT = val; :}
;

operacionAritmetica ::= SUM A_PARENTESIS operacionAritmetica:a COMA operacionAritmetica:b C_PARENTESIS {: RESULT = operacionesArit.SUM(a.toString(),b.toString());:}
                      | RES A_PARENTESIS operacionAritmetica:a COMA operacionAritmetica:b C_PARENTESIS {: RESULT = operacionesArit.RES(a.toString(),b.toString());:}
                      | MUL A_PARENTESIS operacionAritmetica:a COMA operacionAritmetica:b C_PARENTESIS {: RESULT = operacionesArit.MUL(a.toString(),b.toString());:}
                      | DIV A_PARENTESIS operacionAritmetica:a COMA operacionAritmetica:b C_PARENTESIS {: RESULT = operacionesArit.DIV(a.toString(),b.toString());:}
                      | MOD A_PARENTESIS operacionAritmetica:a COMA operacionAritmetica:b C_PARENTESIS {: RESULT = operacionesArit.MOD(a.toString(),b.toString());:}
                      | ENTERO:val {: RESULT = val;:}
                      | DECIMAL:val {: RESULT = val;:}
                      | ID: val {:RESULT = variables.getVariable(val);:}
                      | CADENA:val {: RESULT = val.substring(1, val.length() - 1); :}
                      

                       | MEDIA A_PARENTESIS A_CORCHETE operacionesEstad C_CORCHETE C_PARENTESIS {:
                        RESULT = operacionesArit.Media(operacionesArit.listaEstadistica);operacionesArit.listaEstadistica.clear();:}

                        |MEDIANA A_PARENTESIS A_CORCHETE operacionesEstad C_CORCHETE C_PARENTESIS {:
                        RESULT = operacionesArit.Mediana(operacionesArit.listaEstadistica);operacionesArit.listaEstadistica.clear();:}

                        |MODA A_PARENTESIS A_CORCHETE operacionesEstad C_CORCHETE C_PARENTESIS {:
                        RESULT = operacionesArit.Moda(operacionesArit.listaEstadistica);operacionesArit.listaEstadistica.clear();:}

                        |VARIANZA A_PARENTESIS A_CORCHETE operacionesEstad C_CORCHETE C_PARENTESIS{:
                        RESULT = operacionesArit.Varianza(operacionesArit.listaEstadistica);operacionesArit.listaEstadistica.clear();:}

                        |MAX A_PARENTESIS A_CORCHETE operacionesEstad C_CORCHETE C_PARENTESIS {:
                        RESULT = operacionesArit.Maximo(operacionesArit.listaEstadistica);operacionesArit.listaEstadistica.clear();:}

                        |MIN A_PARENTESIS A_CORCHETE operacionesEstad C_CORCHETE C_PARENTESIS {:
                        RESULT = operacionesArit.Minimo(operacionesArit.listaEstadistica);operacionesArit.listaEstadistica.clear();:}

                        |MEDIA A_PARENTESIS ID_ARREGLO:val C_PARENTESIS {:

                                Object obj = variables.getVariable(val);
                                if (obj instanceof LinkedList) {
                                LinkedList<Object> lista = (LinkedList<Object>) obj;
                                RESULT = operacionesArit.Media(lista);
                                } else {
                                // Manejar el caso en el que el objeto no es un LinkedList
                                }
                        :}

                        |MEDIANA A_PARENTESIS ID_ARREGLO:val C_PARENTESIS {:

                                Object obj = variables.getVariable(val);
                                if (obj instanceof LinkedList) {
                                LinkedList<Object> lista = (LinkedList<Object>) obj;
                                RESULT = operacionesArit.Mediana(lista);
                                } else {
                                // Manejar el caso en el que el objeto no es un LinkedList
                                }
                        :}

                        |MODA A_PARENTESIS ID_ARREGLO:val C_PARENTESIS {:

                                Object obj = variables.getVariable(val);
                                if (obj instanceof LinkedList) {
                                LinkedList<Object> lista = (LinkedList<Object>) obj;
                                RESULT = operacionesArit.Moda(lista);
                                } else {
                                // Manejar el caso en el que el objeto no es un LinkedList
                                }
                        :}

                        |VARIANZA A_PARENTESIS ID_ARREGLO:val C_PARENTESIS {:

                                Object obj = variables.getVariable(val);
                                if (obj instanceof LinkedList) {
                                LinkedList<Object> lista = (LinkedList<Object>) obj;
                                RESULT = operacionesArit.Varianza(lista);
                                } else {
                                // Manejar el caso en el que el objeto no es un LinkedList
                                }
                        :}

                        |MAX A_PARENTESIS ID_ARREGLO:val C_PARENTESIS {:

                                Object obj = variables.getVariable(val);
                                if (obj instanceof LinkedList) {
                                LinkedList<Object> lista = (LinkedList<Object>) obj;
                                RESULT = operacionesArit.Maximo(lista);
                                } else {
                                // Manejar el caso en el que el objeto no es un LinkedList
                                }
                        :}

                        |MIN A_PARENTESIS ID_ARREGLO:val C_PARENTESIS {:

                                Object obj = variables.getVariable(val);
                                if (obj instanceof LinkedList) {
                                LinkedList<Object> lista = (LinkedList<Object>) obj;
                                RESULT = operacionesArit.Minimo(lista);
                                } else {
                                // Manejar el caso en el que el objeto no es un LinkedList
                                }
                        :}
;

operacionesEstad ::= operacionAritmetica:b COMA operacionesEstad {:RESULT = operacionesArit.listaEstadistica.add(b.toString());:}
                    | operacionAritmetica:c {:RESULT = operacionesArit.listaEstadistica.add(c.toString());:}
;




//DECLARACION DE ARREGLOS

DeclararArreglos ::= ARR DOS_PUNTOS tipo DOS_PUNTOS DOS_PUNTOS ID_ARREGLO:id MENOR_Q GUION A_CORCHETE OperacionesArreglos:exp C_CORCHETE END PUNTO_COMA {:
                        variables.addVariable(id,new LinkedList<Object>(operacionesArit.ListaArreglos)); operacionesArit.ListaArreglos.clear(); :} 
;

OperacionesArreglos ::= operacionAritmetica:c COMA OperacionesArreglos {:RESULT=operacionesArit.ListaArreglos.add(c.toString());:}
                    | operacionAritmetica:b {:RESULT= operacionesArit.ListaArreglos.add(b.toString());:}
;




//IMPRESIONES EN CONSOLA

imprimirTipos ::= CONSOLE DOS_PUNTOS DOS_PUNTOS tiposImpresion END PUNTO_COMA
;

tiposImpresion ::=  PRINT S_IGUAL elementoImpresion {: 
                        Collections.reverse(impresionC.lista_salida);
                        for (int i = 0; i < impresionC.lista_salida.size(); i++) { 
                                interfaz.appendConsolaText(impresionC.lista_salida.get(i).toString(), false); 
                                if (i < impresionC.lista_salida.size() - 1) { 
                                        interfaz.appendConsolaText(", ", false); 
                                        } 
                                }
                                interfaz.appendConsolaText("", true);       
                                impresionC.lista_salida.clear(); :}

                |COLUMNA S_IGUAL titulo_arreglo:titulo GUION MAYOR_Q arreglo_contenido{:
                        interfaz.appendConsolaText("------------------------",true);
                        interfaz.appendConsolaText(titulo.toString(), true);
                        interfaz.appendConsolaText("------------------------", true);
                        Collections.reverse(impresionC.lista_columnas);
                        for (int i = 0; i < impresionC.lista_columnas.size(); i++){
                                interfaz.appendConsolaText(impresionC.lista_columnas.get(i).toString(), true);
                                if(i<impresionC.lista_columnas.size()-1){
                                    //System.out.println();    
                                }
                        }
                        interfaz.appendConsolaText(" ", true); 
                        impresionC.lista_columnas.clear();:}
;



elementoImpresion ::= ID_ARREGLO:val {:impresionC.lista_salida.add(variables.getVariable(val));:}
                    |operacionAritmetica:a {:impresionC.lista_salida.add(a.toString());:}
                    |operacionAritmetica:a COMA elementoImpresion {:impresionC.lista_salida.add(a.toString());:}
;


titulo_arreglo::= CADENA:val {: RESULT = val.substring(1, val.length() - 1); :}
                | ID: val {:RESULT = variables.getVariable(val);:}

;

arreglo_contenido::= A_CORCHETE OperacionImpresionArreglos C_CORCHETE 
                | ID_ARREGLO:val {:LinkedList<Object> temp = (LinkedList<Object>) variables.getVariable(val);
                                for (Object obj : temp) {
                                impresionC.lista_columnas.add(obj);
                                }:}
;

OperacionImpresionArreglos ::=  operacionAritmetica:c COMA OperacionImpresionArreglos {:RESULT=impresionC.lista_columnas.add(c.toString());:}
                                | operacionAritmetica:b {:RESULT=impresionC.lista_columnas.add(b.toString());:}
;


//IMPRESIONES DE GRAFICAS

Impresion_graficas ::=   GraphBar A_PARENTESIS barras C_PARENTESIS END PUNTO_COMA
                        |GraphPie A_PARENTESIS pie C_PARENTESIS END PUNTO_COMA
                        |GraphLine A_PARENTESIS linea C_PARENTESIS END PUNTO_COMA
                        |HISTOGRAM A_PARENTESIS histograma C_PARENTESIS END PUNTO_COMA
;

barras ::= graficaBarras  
        | graficaBarras barras
;

pie ::= graficaPie
        | graficaPie pie
;

linea ::= graficaLinea
        | graficaLinea linea
;

histograma ::= graficaHistograma
        | graficaHistograma histograma

;

graficaBarras ::=  tituloGrafica:titulo         {:grafica_info.putGraficaBarras("titulo",titulo.toString());:}
                |ejeXGrafica:eX                 {:grafica_info.putGraficaBarras("ejeX",eX);:}
                |ejeYGrafica:eY                 {:grafica_info.putGraficaBarras("ejeY", eY);:}
                |tituloXGrafica:tituloX         {:grafica_info.putGraficaBarras("tituloX", tituloX.toString());:}
                |tituloYGrafica:tituloY         {:grafica_info.putGraficaBarras("tituloY", tituloY.toString());:}
                |execGraficas 
                {:
                        GraficaBarrasInfo grafica_barra = new GraficaBarrasInfo();

                        grafica_barra.setTitulo((String) grafica_info.getGraficaBarras("titulo"));
                        grafica_barra.setEjeX((List<String>) grafica_info.getGraficaBarras("ejeX"));
                        grafica_barra.setEjeY((List<String>) grafica_info.getGraficaBarras("ejeY"));
                        grafica_barra.setTituloX((String) grafica_info.getGraficaBarras("tituloX"));
                        grafica_barra.setTituloY((String) grafica_info.getGraficaBarras("tituloY"));

                        AlmacenamientoGraficas.listaGraficasBarras.add(grafica_barra);
                        GraficaInfo.componentesGraficaBarras.clear();
                        GeneradorGraficas.generarTodasLasGraficasBarras(AlmacenamientoGraficas.listaGraficasBarras);
                        //interfaz.appendConsolaText("Grafica de Barras generada", true);

                :}
;

graficaPie ::= labelGrafica:label {:grafica_info.putGraficaPie("label",label);:}
                | valuesGrafica:values {:grafica_info.putGraficaPie("values",values);:}
                | tituloGrafica:titulo {:grafica_info.putGraficaPie("titulo",titulo.toString());:}
                |execGraficas  
                {:
                        GraficaPieInfo grafica_pie = new GraficaPieInfo();

                        grafica_pie.setTitulo((String) grafica_info.getGraficaPie("titulo"));
                        grafica_pie.setValues((List<String>) grafica_info.getGraficaPie("values"));
                        grafica_pie.setLabels((List<String>)grafica_info.getGraficaPie("label"));
                        
                        AlmacenamientoGraficas.listaGraficasPie.add(grafica_pie);
                        GraficaInfo.componentesGraficaPie.clear();
                        GeneradorGraficas.generarTodasLasGraficasPie(AlmacenamientoGraficas.listaGraficasPie);
                        //interfaz.appendConsolaText("Grafica Pie generada", true);
                       
                
                :}


;

graficaLinea ::=  tituloGrafica:titulo {:grafica_info.putGraficaLinea("titulo",titulo.toString());:}
                | ejeXGrafica:eX  {:grafica_info.putGraficaLinea("ejeX",eX);:}
                | ejeYGrafica:eY   {:grafica_info.putGraficaLinea("ejeY", eY);:}
                | tituloXGrafica:TX {:grafica_info.putGraficaLinea("tituloX",TX.toString());:}
                | tituloYGrafica:TY {:grafica_info.putGraficaLinea("tituloY",TY.toString());:}
                | execGraficas 
                {:
                
                        GraficaLineaInfo grafica_linea = new GraficaLineaInfo();

                        grafica_linea.setTitulo((String) grafica_info.getGraficaLinea("titulo"));
                        grafica_linea.setEjeX((List<String>) grafica_info.getGraficaLinea("ejeX"));
                        grafica_linea.setEjeY((List<String>) grafica_info.getGraficaLinea("ejeY"));
                        grafica_linea.setTituloX((String) grafica_info.getGraficaLinea("tituloX"));
                        grafica_linea.setTituloY((String) grafica_info.getGraficaLinea("tituloY"));

                        AlmacenamientoGraficas.listaGraficasLinea.add(grafica_linea);
                        GraficaInfo.componentesGraficaLinea.clear();
                        GeneradorGraficas.generarTodasLasGraficasLinea(AlmacenamientoGraficas.listaGraficasLinea);
                        //interfaz.appendConsolaText("Grafica de Linea generada", true);

                :}
;

graficaHistograma ::=  tituloGrafica:titulo {:grafica_info.putHistograma("titulo",titulo.toString());:}
                | valuesGrafica:values {:grafica_info.putHistograma("values",values);:}
                | execGraficas 
                {:
                        GraficaHistoInfo grafica_histo = new GraficaHistoInfo();
                
                        grafica_histo.setTitulo((String) grafica_info.getHistograma("titulo"));
                        grafica_histo.setValues((List<String>) grafica_info.getHistograma("values"));


                        AlmacenamientoGraficas.listaGraficasHisto.add(grafica_histo);
                        GraficaInfo.componentesHistograma.clear();
                        GeneradorGraficas.generarTodasLasTablasHisto(AlmacenamientoGraficas.listaGraficasHisto, interfaz);
                        GeneradorGraficas.generarTodasLasGraficasHisto(AlmacenamientoGraficas.listaGraficasHisto);               
                        //interfaz.appendConsolaText("Grafica Histograma generada", true);
                
                :}
;


//parámetros de las gráficas
tituloGrafica ::= TITULO DOS_PUNTOS DOS_PUNTOS CHAR1 A_CORCHETE C_CORCHETE S_IGUAL variablesGraficas:val END PUNTO_COMA
{:
        RESULT = val;
:}
;

ejeXGrafica ::= E_X DOS_PUNTOS DOS_PUNTOS CHAR1 A_CORCHETE C_CORCHETE S_IGUAL {:impresionC.lista_graficas.clear();:} operacionesGraficas1  END PUNTO_COMA
{:      
        Collections.reverse(impresionC.lista_graficas);
        RESULT = new LinkedList<>(impresionC.lista_graficas);
        impresionC.lista_graficas.clear();
:}
;

ejeYGrafica ::= E_Y DOS_PUNTOS DOS_PUNTOS DOUBLE1 S_IGUAL {:impresionC.lista_graficas.clear();:} operacionesGraficas1 END PUNTO_COMA
{:
        Collections.reverse(impresionC.lista_graficas);
        RESULT = new LinkedList<>(impresionC.lista_graficas);
        impresionC.lista_graficas.clear();        
:}
;

tituloXGrafica ::= T_X DOS_PUNTOS DOS_PUNTOS CHAR1 A_CORCHETE C_CORCHETE S_IGUAL variablesGraficas:val END PUNTO_COMA
{:
        RESULT = val;
:}
;

tituloYGrafica ::= T_Y DOS_PUNTOS DOS_PUNTOS CHAR1 A_CORCHETE C_CORCHETE S_IGUAL variablesGraficas:val END PUNTO_COMA
{:
        RESULT = val;
:}
;

labelGrafica ::= LABEL DOS_PUNTOS DOS_PUNTOS CHAR1 A_CORCHETE C_CORCHETE S_IGUAL  {:impresionC.lista_graficas.clear();:} operacionesGraficas1  END PUNTO_COMA
{:
        Collections.reverse(impresionC.lista_graficas);
        RESULT = new LinkedList<>(impresionC.lista_graficas);
        impresionC.lista_graficas.clear();  
:}
;

valuesGrafica ::= VALUES DOS_PUNTOS DOS_PUNTOS DOUBLE1 S_IGUAL  {:impresionC.lista_graficas.clear();:} operacionesGraficas1  END PUNTO_COMA
{:
        Collections.reverse(impresionC.lista_graficas);
        RESULT = new LinkedList<>(impresionC.lista_graficas);
        impresionC.lista_graficas.clear();  
:}
;

execGraficas ::= EXEC tiposGraficas END PUNTO_COMA
;

tiposGraficas ::= GraphBar 
                |GraphPie 
                |GraphLine 
                |HISTOGRAM 
;

variablesGraficas ::= CADENA:val {: RESULT = val.substring(1, val.length() - 1); :}
                     | ID: val {:RESULT = variables.getVariable(val);:}
;

operacionesGraficas ::=  operacionAritmetica:c COMA operacionesGraficas {:RESULT=impresionC.lista_graficas.add(c.toString());:}
                        | operacionAritmetica:c {:RESULT=impresionC.lista_graficas.add(c.toString());:}
;

operacionesGraficas1 ::= A_CORCHETE operacionesGraficas C_CORCHETE
                        | ID_ARREGLO:val {:LinkedList<Object> temp = (LinkedList<Object>) variables.getVariable(val);
                                for (Object obj : temp) {
                                impresionC.lista_graficas.add(obj);
                                }:}

;